{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "0px",
  "borderWidth": "0",
  "bottomRow": 80,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{utils}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "4lu8homunf",
  "leftColumn": 0,
  "maxDynamicHeight": 57,
  "minDynamicHeight": 52,
  "mobileBottomRow": 36,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 6,
  "mobileTopRow": 6,
  "needsErrorInfo": false,
  "originalBottomRow": 80,
  "originalTopRow": 27,
  "parentColumnSpace": 16.489013671875,
  "parentId": "kq9fwn5mdt",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 63,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n/* 应用容器 */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  font-family: Arial, sans-serif;\n  background-color: #f5f5f5;\n  padding: 16px;\n  box-sizing: border-box;\n}\n\n/* 主内容区域 */\n.app-main {\n  display: flex;\n  flex: 1;\n  gap: 16px;\n  height: 100%;\n}\n\n.chapter-tree-page {\n  height: 100vh;\n}\n\n/* 章节面板 */\n.chapter-panel {\n  width: 66.7%;\n  background-color: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  transition: width 0.3s;\n}\n\n/* 全宽章节面板 */\n.chapter-panel.full-width {\n  width: 100%;\n}\n\n/* 面板头部 */\n.panel-header {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px 16px 0 16px;\n  height: 30px;\n  line-height: 30px;\n}\n\n/* 面板标题 */\n.panel-title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.85);\n}\n\n/* 添加一级目录按钮 */\n.add-root-button {\n  padding: 5px 12px;\n  background-color: #fff;\n  color: #3949ab;\n  border: 1px solid #3949ab;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.add-root-button:hover {\n  background-color: rgba(57, 73, 171, 0.062745098);\n}\n\n/* 章节树容器 */\n.chapter-tree-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n/* 编辑器面板 */\n.editor-panel {\n  flex: 1;\n  background-color: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 空编辑器状态 */\n.empty-editor {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  color: #888;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 6px 15px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 20px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 标题样式 */\nh2 {\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  margin-bottom: 16px;\n  font-weight: 500;\n}\n\n/* 面板操作区域 */\n.panel-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 模式切换按钮 */\n.mode-toggle-button {\n  padding: 5px 12px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.mode-toggle-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节编辑器 */\n.chapter-editor {\n  padding: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 40px); /* 减去内边距 */\n}\n\n/* 编辑器标题 */\n.editor-header {\n  margin-bottom: 24px;\n  border-bottom: 1px solid #f0f0f0;\n  padding-bottom: 16px;\n}\n\n.editor-header h2 {\n  margin: 0;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n/* 编辑器表单 */\n.editor-form {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden; /* 防止内容溢出 */\n}\n\n/* 表单内容区域 */\n.form-content {\n  flex: 1;\n  overflow-y: auto; /* 只有内容区滚动 */\n  margin-bottom: 16px; /* 给底部按钮留空间 */\n}\n\n/* 表单组 */\n.form-group {\n  width: 100%;\n  margin-bottom: 24px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n  word-break: break-all;\n}\n\n/* 输入框样式 */\n.form-control {\n  width: calc(100% - 32px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 32px;\n  line-height: 1.5;\n}\n\n.form-control:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 选择框列表 */\n.checkbox-list {\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  padding: 8px 12px;\n}\n\n/* 选择框项目 */\n.checkbox-item {\n  padding: 8px 0;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.checkbox-item:last-child {\n  border-bottom: none;\n}\n\n/* 选择框标签 */\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.checkbox-label input {\n  margin-right: 8px;\n}\n\n/* 表单操作区域 */\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  /* 移除绝对定位，使用常规流布局 */\n  margin-top: auto; /* 推到底部 */\n}\n\n/* 保存按钮 */\n.save-button {\n  padding: 0 15px;\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 32px;\n}\n\n.save-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 0 15px;\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 30px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节项目 */\n.chapter-item {\n  padding: 12px 15px;\n  background-color: white;\n  border: 1px solid #f0f0f0;\n  border-radius: 2px;\n  cursor: pointer;\n  transition: all 0.2s;\n  margin-bottom: 8px;\n}\n\n.chapter-item:hover {\n  background-color: #f9f9f9;\n}\n\n.chapter-item.selected {\n  background-color: #e6f7ff;\n  border-left: 3px solid #1890ff;\n}\n\n/* 章节内容 */\n.chapter-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n/* 章节标题 */\n.chapter-title {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n}\n\n/* 章节操作按钮 */\n.chapter-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 章节资源列表 */\n.chapter-resources {\n  margin-left: 30px;\n  padding: 5px 0;\n}\n\n/* 资源列表 */\n.resource-list {\n  margin-bottom: 5px;\n}\n\n/* 资源项目 */\n.resource-item {\n  padding: 6px 10px;\n  background-color: #f9f9f9;\n  border-radius: 3px;\n  margin-bottom: 4px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  color: #666;\n  transition: all 0.2s;\n  position: relative;\n  padding-left: 6px; /* 为标记留出空间 */\n}\n\n.resource-item:hover {\n  background-color: #f0f0f0;\n}\n\n/* 资源类型标记 */\n.resource-type-marker {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 4px;\n  height: 100%;\n  border-radius: 2px 0 0 2px;\n}\n\n/* 资源标题 */\n.resource-title {\n  margin-left: 8px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n/* 移除之前的样式 */\n.attachment-item,\n.quiz-item {\n  border-left: none;\n}\n\n/* 课件标签样式 */\n.attachment-item::before {\n  content: \"课件\";\n  display: inline-block;\n  background-color: #22c55e;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n  white-space: nowrap;\n}\n\n/* 考题标签样式 */\n.quiz-item::before {\n  content: \"考试\";\n  display: inline-block;\n  background-color: #eba400;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n}\n\n/* 一级章节 */\n.level-1 {\n  font-weight: 500;\n  background-color: #fafafa;\n  border-left: 3px solid #d9d9d9;\n}\n\n.level-1.selected {\n  border-left: 3px solid #1890ff;\n}\n\n/* 二级章节 */\n.level-2 {\n  font-weight: normal;\n  background-color: #ffffff;\n  padding-left: 20px;\n  margin-left: 15px;\n  border-left: 3px solid #f0f0f0;\n}\n\n.level-2.selected {\n  border-left: 3px solid #52c41a;\n}\n\n/* 添加子章节按钮 */\n.add-sub-button {\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.add-sub-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 删除按钮 */\n.delete-button {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.delete-button:hover {\n  color: #ff4d4f;\n  border-color: #ff4d4f;\n}\n\n/* 一级章节的资源列表样式调整 */\n.level-1-resources {\n  margin-left: 10px;\n  border-left: 3px solid #d9d9d9;\n  padding-left: 20px;\n}\n\n/* 只读模式下的资源样式 */\n.read-only-resources .resource-item {\n  cursor: default;\n}\n\n.read-only-resources .resource-item:hover {\n  background-color: #f9f9f9; /* 保持原背景色，不改变 */\n}\n\n/* 章节树样式 */\n.chapter-tree {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n/* 章节组样式 */\n.chapter-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5px;\n}\n\n/* 子章节区域样式 */\n.sub-chapters {\n  margin-left: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-top: 5px;\n  border-left: 1px dashed #d9d9d9;\n  margin-left: 10px;\n  padding-left: 20px;\n}\n\n/* 只读模式样式 */\n.chapter-tree.read-only .chapter-item {\n  cursor: default;\n}\n\n.chapter-tree.read-only .chapter-item:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only {\n  cursor: default;\n}\n\n.chapter-item.read-only:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only.selected {\n  background-color: transparent;\n  font-weight: normal;\n  color: inherit;\n}\n\n.confirm-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.confirm-dialog {\n  background-color: white;\n  padding: 24px;\n  border-radius: 2px;\n  width: 320px;\n  box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08);\n}\n\n.confirm-dialog-title {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n}\n\n.confirm-dialog-message {\n  margin-bottom: 24px;\n  color: rgba(0, 0, 0, 0.65);\n  font-size: 14px;\n}\n\n.confirm-dialog-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n}\n\n.confirm-dialog-cancel {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 30px;\n  background-color: white;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.65);\n}\n\n.confirm-dialog-cancel:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n.confirm-dialog-confirm {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 32px;\n  background-color: #3949ab;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: white;\n}\n\n.confirm-dialog-confirm:hover {\n  background-color: #5c6bc0;\n}\n\n/* 禁用的多选框标签样式 */\n.checkbox-label.disabled {\n  color: #999;\n  cursor: not-allowed;\n}\n\n/* 已被使用标记的样式 */\n.resource-used-mark {\n  margin-left: 5px;\n  font-size: 12px;\n  color: #ff6b6b;\n  font-style: italic;\n}\n\n/* 章节树空状态样式 */\n.chapter-tree-empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #999;\n  text-align: center;\n}\n\n.empty-state-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n  color: #d9d9d9;\n}\n\n.empty-state-text {\n  font-size: 16px;\n  margin-bottom: 8px;\n  color: #666;\n}\n\n.empty-state-hint {\n  font-size: 14px;\n  color: #999;\n}\n\n/* 资源列表空状态样式 */\n.resource-empty-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  color: #999;\n  font-size: 14px;\n  background-color: #fafafa;\n  border-radius: 3px;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// 模拟的可选考题数据\nconst AVAILABLE_QUIZZES = [{\n  id: 1,\n  name: \"考题1：Java基础知识测试\"\n}, {\n  id: 2,\n  name: \"考题2：面向对象概念理解\"\n}, {\n  id: 3,\n  name: \"考题3：Java语法练习\"\n}, {\n  id: 4,\n  name: \"考题4：编程实践题\"\n}, {\n  id: 5,\n  name: \"考题5：综合应用能力测试\"\n}];\nfunction ConfirmDialog({\n  isOpen,\n  name,\n  message,\n  onConfirm,\n  onCancel\n}) {\n  if (!isOpen) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog-overlay\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog\"\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"confirm-dialog-title\"\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"confirm-dialog-message\"\n  }, message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog-actions\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-dialog-cancel\",\n    onClick: onCancel\n  }, \"\\u53D6\\u6D88\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-dialog-confirm\",\n    onClick: onConfirm\n  }, \"\\u786E\\u5B9A\"))));\n}\n\n// 章节项组件\nfunction ChapterItem({\n  chapter,\n  selected,\n  onSelect,\n  onAddSubChapter,\n  onDelete,\n  level,\n  readOnly = false // 添加只读模式参数，默认为false\n}) {\n  // 添加状态控制确认对话框显示\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [courseWare, setCourseWare] = useState(appsmith?.model?.courseWare ?? []);\n\n  // 处理章节选择\n  const handleSelect = () => {\n    if (!readOnly) {\n      onSelect(chapter.id);\n    }\n  };\n\n  // 处理添加子章节\n  const handleAddSubChapter = e => {\n    e.stopPropagation(); // 阻止事件冒泡，避免触发章节选择\n    onAddSubChapter(chapter.id);\n  };\n\n  // 处理删除按钮点击\n  const handleDeleteClick = e => {\n    e.stopPropagation(); // 阻止事件冒泡\n    setShowDeleteConfirm(true); // 显示确认对话框\n  };\n\n  // 确认删除\n  const confirmDelete = () => {\n    setShowDeleteConfirm(false);\n    onDelete(chapter.id);\n  };\n\n  // 取消删除\n  const cancelDelete = () => {\n    setShowDeleteConfirm(false);\n  };\n\n  // 格式化章节标题\n  const formatTitle = () => {\n    // 对于一级章节，格式为\"第X章\"\n    if (level === 1) {\n      return `第${chapter.sort}章 ${chapter.name}`;\n    }\n\n    // 对于二级章节，格式为\"X.Y\"\n    return `${chapter.id} ${chapter.name}`;\n  };\n\n  // 辅助函数：根据ID查找对应的课件名称\n  const getAttachmentName = id => {\n    const attachment = courseWare.find(a => a.id === id);\n    return attachment ? attachment.name : `未知课件(${id})`;\n  };\n\n  // 辅助函数：根据ID查找对应的考题名称\n  const getQuizName = id => {\n    const quiz = AVAILABLE_QUIZZES.find(q => q.id === id);\n    return quiz ? quiz.name : `未知考题(${id})`;\n  };\n\n  // 检查是否有关联的课件或考题\n  const hasAttachments = chapter.attachments && chapter.attachments.length > 0;\n  const hasQuizzes = chapter.quizzes && chapter.quizzes.length > 0;\n  useEffect(() => {\n    appsmith.onModelChange((model, prevModel) => {\n      if (JSON.stringify(model.courseWare) !== JSON.stringify(prevModel?.courseWare)) {\n        setCourseWare(model.courseWare ?? []);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-item ${selected ? 'selected' : ''} level-${level} ${readOnly ? 'read-only' : ''}`,\n    onClick: handleSelect\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-content\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-name\"\n  }, chapter.displayTitle || formatTitle()), !readOnly && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-actions\"\n  }, level === 1 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"add-sub-button\",\n    onClick: handleAddSubChapter,\n    title: \"\\u6DFB\\u52A0\\u4E8C\\u7EA7\\u76EE\\u5F55\"\n  }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"delete-button\",\n    onClick: handleDeleteClick,\n    title: \"\\u5220\\u9664\\u7AE0\\u8282\"\n  }, \"\\xD7\")))), (hasAttachments || hasQuizzes) && /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-resources ${level === 1 ? 'level-1-resources' : ''} ${readOnly ? 'read-only-resources' : ''}`\n  }, hasAttachments && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-list\"\n  }, chapter.attachments.map((attachmentId, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `att-${index}`,\n    className: \"resource-item attachment-item\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-type-marker file-marker\"\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-title\"\n  }, getAttachmentName(attachmentId))))), hasQuizzes && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-list\"\n  }, chapter.quizzes.map((quizId, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `quiz-${index}`,\n    className: \"resource-item quiz-item\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-type-marker quiz-marker\"\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-title\"\n  }, getQuizName(quizId)))))), /*#__PURE__*/React.createElement(ConfirmDialog, {\n    isOpen: showDeleteConfirm,\n    title: \"\\u5220\\u9664\\u786E\\u8BA4\",\n    message: `确定要删除\"${chapter.name}\"章节吗？`,\n    onConfirm: confirmDelete,\n    onCancel: cancelDelete\n  }));\n}\n\n// 章节树组件\nfunction ChapterTree({\n  chapters,\n  selectedChapterId,\n  onSelectChapter,\n  onAddSubChapter,\n  onDeleteChapter,\n  readOnly = false // 添加只读模式参数，默认为false\n}) {\n  // 获取顶级章节\n  const rootChapters = chapters.filter(chapter => !chapter.parentId);\n\n  // 排序顶级章节\n  const sortedRootChapters = [...rootChapters].sort((a, b) => a.sort - b.sort);\n\n  // 获取子章节\n  const getChildChapters = parentId => {\n    return chapters.filter(chapter => chapter.parentId === parentId).sort((a, b) => {\n      const aOrder = parseInt(a.id.split('.')[1]);\n      const bOrder = parseInt(b.id.split('.')[1]);\n      return aOrder - bOrder;\n    });\n  };\n\n  // 如果没有一级章节，显示空状态\n  if (sortedRootChapters.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chapter-tree-empty-state\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-icon\"\n    }, \"\\uD83D\\uDCDA\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-text\"\n    }, \"\\u6682\\u65E0\\u7AE0\\u8282\\u6570\\u636E\"), !readOnly && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-hint\"\n    }, \"\\u70B9\\u51FB\\\"\\u6DFB\\u52A0\\u4E00\\u7EA7\\u76EE\\u5F55\\\"\\u6309\\u94AE\\u521B\\u5EFA\\u7AE0\\u8282\"));\n  }\n\n  // 自定义章节标题格式化函数\n  const formatChapterTitle = (chapter, index, parentIndex = null) => {\n    if (!parentIndex) {\n      // 一级章节：第X章 名称\n      return `第${index}章 ${chapter.name}`;\n    } else {\n      // 二级章节：X.Y 名称\n      return `${parentIndex}.${index} ${chapter.name}`;\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-tree ${readOnly ? 'read-only' : ''}`\n  }, sortedRootChapters.map((rootChapter, rootIndex) => {\n    const parentIndex = rootIndex + 1; // 从1开始的父章节索引\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rootChapter.id,\n      className: \"chapter-root\"\n    }, /*#__PURE__*/React.createElement(ChapterItem, {\n      chapter: {\n        ...rootChapter,\n        displayTitle: formatChapterTitle(rootChapter, parentIndex)\n      },\n      selected: selectedChapterId === rootChapter.id,\n      onSelect: readOnly ? () => {} : onSelectChapter,\n      onAddSubChapter: onAddSubChapter,\n      onDelete: onDeleteChapter,\n      level: 1,\n      readOnly: readOnly\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chapter-children\"\n    }, getChildChapters(rootChapter.id).map((childChapter, childIndex) => /*#__PURE__*/React.createElement(ChapterItem, {\n      key: childChapter.id,\n      chapter: {\n        ...childChapter,\n        displayTitle: formatChapterTitle(childChapter, childIndex + 1, parentIndex)\n      },\n      selected: selectedChapterId === childChapter.id,\n      onSelect: readOnly ? () => {} : onSelectChapter,\n      onAddSubChapter: onAddSubChapter,\n      onDelete: onDeleteChapter,\n      level: 2,\n      readOnly: readOnly\n    }))));\n  }));\n}\nfunction ChapterTreePage() {\n  // 章节数据状态\n  const [chapters, setChapters] = useState(appsmith?.model?.chapters ?? []);\n\n  // 当前选中的章节ID\n  const [selectedChapterId, setSelectedChapterId] = useState(null);\n  // 是否显示编辑器\n  const [showEditor, setShowEditor] = useState(false);\n  useEffect(() => {\n    appsmith.onModelChange((model, prevModel) => {\n      if (JSON.stringify(model.chapters) !== JSON.stringify(prevModel?.chapters)) {\n        setChapters(model.chapters ?? []);\n      }\n    });\n  }, []);\n\n  // 添加新章节\n  const addChapter = (parentId = null) => {\n    // 如果是添加一级章节\n    if (parentId === null) {\n      // 获取当前最大的一级章节数量\n      const rootChapters = chapters.filter(c => c.parentId === null);\n      const newOrder = rootChapters.length + 1;\n      const newChapter = {\n        id: newOrder.toString(),\n        name: '新章节名称',\n        sort: newOrder,\n        parentId: null,\n        attachments: [],\n        // 确保初始化为空数组\n        quizzes: [] // 确保初始化为空数组\n      };\n      setChapters([...chapters, newChapter]);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: [...chapters, newChapter]\n      });\n      setSelectedChapterId(newChapter.id);\n      // 显示编辑器\n      setShowEditor(true);\n    } else {\n      // 如果是添加二级章节（子章节）\n      // 获取父章节\n      const parentChapter = chapters.find(c => c.id === parentId);\n      if (!parentChapter) return;\n\n      // 获取该父章节下的所有子章节\n      const childChapters = chapters.filter(c => c.parentId === parentId);\n      // 计算新子章节的顺序\n      const newChildOrder = childChapters.length + 1;\n      // 创建新子章节\n      const newChildChapter = {\n        id: `${parentId}.${newChildOrder}`,\n        name: '新小节名称',\n        sort: newChildOrder,\n        parentId: parentId,\n        attachments: [],\n        // 确保初始化为空数组\n        quizzes: [] // 确保初始化为空数组\n      };\n      setChapters([...chapters, newChildChapter]);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: [...chapters, newChildChapter]\n      });\n      setSelectedChapterId(newChildChapter.id);\n      // 显示编辑器\n      setShowEditor(true);\n    }\n  };\n\n  // 删除章节\n  const deleteChapter = chapterId => {\n    // 找到要删除的章节\n    const chapterToDelete = chapters.find(c => c.id === chapterId);\n    if (!chapterToDelete) return;\n\n    // 如果是一级章节，同时删除其所有子章节\n    if (chapterToDelete.parentId === null) {\n      const updatedChapters = chapters.filter(c => c.id !== chapterId && c.parentId !== chapterId);\n\n      // 重新排序剩余的一级章节\n      const rootChapters = updatedChapters.filter(c => c.parentId === null).sort((a, b) => a.sort - b.sort);\n\n      // 更新一级章节的ID和顺序\n      rootChapters.forEach((chapter, index) => {\n        const newOrder = index + 1;\n        const oldId = chapter.id;\n        chapter.id = newOrder.toString();\n        chapter.sort = newOrder;\n\n        // 同时更新该章节下所有子章节的ID\n        updatedChapters.filter(c => c.parentId === oldId).forEach(childChapter => {\n          childChapter.parentId = chapter.id;\n          childChapter.id = `${chapter.id}.${childChapter.sort}`;\n        });\n      });\n      setChapters(updatedChapters);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: updatedChapters\n      });\n\n      // 如果删除的是当前选中的章节，取消选中并隐藏编辑器\n      if (selectedChapterId === chapterId) {\n        setSelectedChapterId(null);\n        setShowEditor(false);\n      }\n    } else {\n      // 如果是二级章节，只删除该章节\n      const parentId = chapterToDelete.parentId;\n      const updatedChapters = chapters.filter(c => c.id !== chapterId);\n\n      // 重新排序同一父章节下的所有子章节\n      const siblingChapters = updatedChapters.filter(c => c.parentId === parentId).sort((a, b) => a.sort - b.sort);\n\n      // 更新子章节的ID和顺序\n      siblingChapters.forEach((chapter, index) => {\n        const newOrder = index + 1;\n        chapter.id = `${parentId}.${newOrder}`;\n        chapter.sort = newOrder;\n      });\n      setChapters(updatedChapters);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: updatedChapters\n      });\n      // 如果删除的是当前选中的章节，选择父章节\n      if (selectedChapterId === chapterId) {\n        setSelectedChapterId(parentId);\n      }\n    }\n  };\n\n  // 选中章节\n  const selectChapter = chapterId => {\n    setSelectedChapterId(chapterId);\n    setShowEditor(true); // 选中章节时显示编辑器\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-tree-page\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-main\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-panel ${!showEditor ? 'full-width' : ''}`\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-tree-container\"\n  }, /*#__PURE__*/React.createElement(ChapterTree, {\n    chapters: chapters,\n    selectedChapterId: selectedChapterId,\n    onSelectChapter: selectChapter,\n    onAddSubChapter: addChapter,\n    onDeleteChapter: deleteChapter,\n    readOnly: true // 根据模式设置是否只读\n  })))));\n}\nappsmith.onReady(() => {\n  /*\n       * This handler function will get called when parent application is ready.\n       * Initialize your component here\n       * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n       */\n  ReactDOM.render(/*#__PURE__*/React.createElement(ChapterTreePage, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 27,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* 应用容器 */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  font-family: Arial, sans-serif;\n  background-color: #f5f5f5;\n  padding: 16px;\n  box-sizing: border-box;\n}\n\n/* 主内容区域 */\n.app-main {\n  display: flex;\n  flex: 1;\n  gap: 16px;\n  height: 100%;\n}\n\n.chapter-tree-page {\n  height: 100vh;\n}\n\n/* 章节面板 */\n.chapter-panel {\n  width: 66.7%;\n  background-color: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  transition: width 0.3s;\n}\n\n/* 全宽章节面板 */\n.chapter-panel.full-width {\n  width: 100%;\n}\n\n/* 面板头部 */\n.panel-header {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px 16px 0 16px;\n  height: 30px;\n  line-height: 30px;\n}\n\n/* 面板标题 */\n.panel-title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.85);\n}\n\n/* 添加一级目录按钮 */\n.add-root-button {\n  padding: 5px 12px;\n  background-color: #fff;\n  color: #3949ab;\n  border: 1px solid #3949ab;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.add-root-button:hover {\n  background-color: #3949ab10;\n}\n\n/* 章节树容器 */\n.chapter-tree-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n/* 编辑器面板 */\n.editor-panel {\n  flex: 1;\n  background-color: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 空编辑器状态 */\n.empty-editor {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  color: #888;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 6px 15px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 20px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 标题样式 */\nh2 {\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  margin-bottom: 16px;\n  font-weight: 500;\n}\n\n/* 面板操作区域 */\n.panel-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 模式切换按钮 */\n.mode-toggle-button {\n  padding: 5px 12px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.mode-toggle-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节编辑器 */\n.chapter-editor {\n  padding: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 40px); /* 减去内边距 */\n}\n\n/* 编辑器标题 */\n.editor-header {\n  margin-bottom: 24px;\n  border-bottom: 1px solid #f0f0f0;\n  padding-bottom: 16px;\n}\n\n.editor-header h2 {\n  margin: 0;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n/* 编辑器表单 */\n.editor-form {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden; /* 防止内容溢出 */\n}\n\n/* 表单内容区域 */\n.form-content {\n  flex: 1;\n  overflow-y: auto; /* 只有内容区滚动 */\n  margin-bottom: 16px; /* 给底部按钮留空间 */\n}\n\n/* 表单组 */\n.form-group {\n  width: 100%;\n  margin-bottom: 24px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n  word-break: break-all;\n}\n\n/* 输入框样式 */\n.form-control {\n  width: calc(100% - 32px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 32px;\n  line-height: 1.5;\n}\n\n.form-control:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 选择框列表 */\n.checkbox-list {\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  padding: 8px 12px;\n}\n\n/* 选择框项目 */\n.checkbox-item {\n  padding: 8px 0;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.checkbox-item:last-child {\n  border-bottom: none;\n}\n\n/* 选择框标签 */\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.checkbox-label input {\n  margin-right: 8px;\n}\n\n/* 表单操作区域 */\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  /* 移除绝对定位，使用常规流布局 */\n  margin-top: auto; /* 推到底部 */\n}\n\n/* 保存按钮 */\n.save-button {\n  padding: 0 15px;\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 32px;\n}\n\n.save-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 0 15px;\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 30px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节项目 */\n.chapter-item {\n  padding: 12px 15px;\n  background-color: white;\n  border: 1px solid #f0f0f0;\n  border-radius: 2px;\n  cursor: pointer;\n  transition: all 0.2s;\n  margin-bottom: 8px;\n}\n\n.chapter-item:hover {\n  background-color: #f9f9f9;\n}\n\n.chapter-item.selected {\n  background-color: #e6f7ff;\n  border-left: 3px solid #1890ff;\n}\n\n/* 章节内容 */\n.chapter-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n/* 章节标题 */\n.chapter-title {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n}\n\n/* 章节操作按钮 */\n.chapter-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 章节资源列表 */\n.chapter-resources {\n  margin-left: 30px;\n  padding: 5px 0;\n}\n\n/* 资源列表 */\n.resource-list {\n  margin-bottom: 5px;\n}\n\n/* 资源项目 */\n.resource-item {\n  padding: 6px 10px;\n  background-color: #f9f9f9;\n  border-radius: 3px;\n  margin-bottom: 4px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  color: #666;\n  transition: all 0.2s;\n  position: relative;\n  padding-left: 6px; /* 为标记留出空间 */\n}\n\n.resource-item:hover {\n  background-color: #f0f0f0;\n}\n\n/* 资源类型标记 */\n.resource-type-marker {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 4px;\n  height: 100%;\n  border-radius: 2px 0 0 2px;\n}\n\n/* 资源标题 */\n.resource-title {\n  margin-left: 8px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n/* 移除之前的样式 */\n.attachment-item,\n.quiz-item {\n  border-left: none;\n}\n\n/* 课件标签样式 */\n.attachment-item::before {\n  content: \"课件\";\n  display: inline-block;\n  background-color: #22c55e;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n  white-space: nowrap;\n}\n\n/* 考题标签样式 */\n.quiz-item::before {\n  content: \"考试\";\n  display: inline-block;\n  background-color: #eba400;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n}\n\n/* 一级章节 */\n.level-1 {\n  font-weight: 500;\n  background-color: #fafafa;\n  border-left: 3px solid #d9d9d9;\n}\n\n.level-1.selected {\n  border-left: 3px solid #1890ff;\n}\n\n/* 二级章节 */\n.level-2 {\n  font-weight: normal;\n  background-color: #ffffff;\n  padding-left: 20px;\n  margin-left: 15px;\n  border-left: 3px solid #f0f0f0;\n}\n\n.level-2.selected {\n  border-left: 3px solid #52c41a;\n}\n\n/* 添加子章节按钮 */\n.add-sub-button {\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.add-sub-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 删除按钮 */\n.delete-button {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.delete-button:hover {\n  color: #ff4d4f;\n  border-color: #ff4d4f;\n}\n\n/* 一级章节的资源列表样式调整 */\n.level-1-resources {\n  margin-left: 10px;\n  border-left: 3px solid #d9d9d9;\n  padding-left: 20px;\n}\n\n/* 只读模式下的资源样式 */\n.read-only-resources .resource-item {\n  cursor: default;\n}\n\n.read-only-resources .resource-item:hover {\n  background-color: #f9f9f9; /* 保持原背景色，不改变 */\n}\n\n/* 章节树样式 */\n.chapter-tree {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n/* 章节组样式 */\n.chapter-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5px;\n}\n\n/* 子章节区域样式 */\n.sub-chapters {\n  margin-left: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-top: 5px;\n  border-left: 1px dashed #d9d9d9;\n  margin-left: 10px;\n  padding-left: 20px;\n}\n\n/* 只读模式样式 */\n.chapter-tree.read-only .chapter-item {\n  cursor: default;\n}\n\n.chapter-tree.read-only .chapter-item:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only {\n  cursor: default;\n}\n\n.chapter-item.read-only:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only.selected {\n  background-color: transparent;\n  font-weight: normal;\n  color: inherit;\n}\n\n.confirm-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.confirm-dialog {\n  background-color: white;\n  padding: 24px;\n  border-radius: 2px;\n  width: 320px;\n  box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12),\n    0 6px 16px 0 rgba(0, 0, 0, 0.08);\n}\n\n.confirm-dialog-title {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n}\n\n.confirm-dialog-message {\n  margin-bottom: 24px;\n  color: rgba(0, 0, 0, 0.65);\n  font-size: 14px;\n}\n\n.confirm-dialog-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n}\n\n.confirm-dialog-cancel {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 30px;\n  background-color: white;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.65);\n}\n\n.confirm-dialog-cancel:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n.confirm-dialog-confirm {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 32px;\n  background-color: #3949ab;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: white;\n}\n\n.confirm-dialog-confirm:hover {\n  background-color: #5c6bc0;\n}\n\n/* 禁用的多选框标签样式 */\n.checkbox-label.disabled {\n    color: #999;\n    cursor: not-allowed;\n}\n\n/* 已被使用标记的样式 */\n.resource-used-mark {\n    margin-left: 5px;\n    font-size: 12px;\n    color: #ff6b6b;\n    font-style: italic;\n}\n\n/* 章节树空状态样式 */\n.chapter-tree-empty-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 40px 0;\n    color: #999;\n    text-align: center;\n}\n\n.empty-state-icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n    color: #d9d9d9;\n}\n\n.empty-state-text {\n    font-size: 16px;\n    margin-bottom: 8px;\n    color: #666;\n}\n\n.empty-state-hint {\n    font-size: 14px;\n    color: #999;\n}\n\n/* 资源列表空状态样式 */\n.resource-empty-state {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px 0;\n    color: #999;\n    font-size: 14px;\n    background-color: #fafafa;\n    border-radius: 3px;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// 模拟的可选考题数据\nconst AVAILABLE_QUIZZES = [\n\t{ id: 1, name: \"考题1：Java基础知识测试\" },\n\t{ id: 2, name: \"考题2：面向对象概念理解\" },\n\t{ id: 3, name: \"考题3：Java语法练习\" },\n\t{ id: 4, name: \"考题4：编程实践题\" },\n\t{ id: 5, name: \"考题5：综合应用能力测试\" },\n];\n\nfunction ConfirmDialog({ isOpen, name, message, onConfirm, onCancel }) {\n\tif (!isOpen) return null;\n\n\treturn (\n\t\t<div className=\"confirm-dialog-overlay\">\n\t\t<div className=\"confirm-dialog\">\n\t\t<h3 className=\"confirm-dialog-title\">{name}</h3>\n<p className=\"confirm-dialog-message\">{message}</p>\n<div className=\"confirm-dialog-actions\">\n\t<button className=\"confirm-dialog-cancel\" onClick={onCancel}>取消</button>\n<button className=\"confirm-dialog-confirm\" onClick={onConfirm}>确定</button>\n</div>\n</div>\n</div>\n);\n}\n\n// 章节项组件\nfunction ChapterItem({\n\tchapter,\n\tselected,\n\tonSelect,\n\tonAddSubChapter,\n\tonDelete,\n\tlevel,\n\treadOnly = false // 添加只读模式参数，默认为false\n}) {\n\t// 添加状态控制确认对话框显示\n\tconst [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\tconst [courseWare, setCourseWare] = useState(appsmith?.model?.courseWare ?? []);\n\n\t// 处理章节选择\n\tconst handleSelect = () => {\n\t\tif (!readOnly) {\n\t\t\tonSelect(chapter.id);\n\t\t}\n\t};\n\n\t// 处理添加子章节\n\tconst handleAddSubChapter = (e) => {\n\t\te.stopPropagation(); // 阻止事件冒泡，避免触发章节选择\n\t\tonAddSubChapter(chapter.id);\n\t};\n\n\t// 处理删除按钮点击\n\tconst handleDeleteClick = (e) => {\n\t\te.stopPropagation(); // 阻止事件冒泡\n\t\tsetShowDeleteConfirm(true); // 显示确认对话框\n\t};\n\n\t// 确认删除\n\tconst confirmDelete = () => {\n\t\tsetShowDeleteConfirm(false);\n\t\tonDelete(chapter.id);\n\t};\n\n\t// 取消删除\n\tconst cancelDelete = () => {\n\t\tsetShowDeleteConfirm(false);\n\t};\n\n\t// 格式化章节标题\n\tconst formatTitle = () => {\n\t\t// 对于一级章节，格式为\"第X章\"\n\t\tif (level === 1) {\n\t\t\treturn `第${chapter.sort}章 ${chapter.name}`;\n\t\t}\n\n\t\t// 对于二级章节，格式为\"X.Y\"\n\t\treturn `${chapter.id} ${chapter.name}`;\n\t};\n\n\t// 辅助函数：根据ID查找对应的课件名称\n\tconst getAttachmentName = (id) => {\n\t\tconst attachment = courseWare.find(a => a.id === id);\n\t\treturn attachment ? attachment.name : `未知课件(${id})`;\n\t};\n\n\t// 辅助函数：根据ID查找对应的考题名称\n\tconst getQuizName = (id) => {\n\t\tconst quiz = AVAILABLE_QUIZZES.find(q => q.id === id);\n\t\treturn quiz ? quiz.name : `未知考题(${id})`;\n\t};\n\n\t// 检查是否有关联的课件或考题\n\tconst hasAttachments = chapter.attachments && chapter.attachments.length > 0;\n\tconst hasQuizzes = chapter.quizzes && chapter.quizzes.length > 0;\n\n\tuseEffect(() => {\n\t\tappsmith.onModelChange((model, prevModel) => {\n\t\t\tif (JSON.stringify(model.courseWare) !== JSON.stringify(prevModel?.courseWare)) {\n\t\t\t\tsetCourseWare(model.courseWare ?? []);\n\t\t\t}\n\t\t})\n\t}, []);\n\n\n\treturn (\n\t\t<div>\n\t\t<div\n\t\tclassName={`chapter-item ${selected ? 'selected' : ''} level-${level} ${readOnly ? 'read-only' : ''}`}\n                onClick={handleSelect}\n            >\n                <div className=\"chapter-content\">\n                    <div className=\"chapter-name\">\n                        {/* 使用预先计算好的显示标题 */}\n                        {chapter.displayTitle || formatTitle()}\n                    </div>\n                    {!readOnly && (\n                        <div className=\"chapter-actions\">\n                            {/* 只有一级章节才显示添加子章节按钮 */}\n                            {level === 1 && (\n                                <button\n                                    className=\"add-sub-button\"\n                                    onClick={handleAddSubChapter}\n                                    title=\"添加二级目录\"\n                                >\n                                    +\n                                </button>\n                            )}\n                            <button\n                                className=\"delete-button\"\n                                onClick={handleDeleteClick}\n                                title=\"删除章节\"\n                            >\n                                ×\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {/* 显示关联的课件或考题 */}\n            {(hasAttachments || hasQuizzes) && (\n                <div className={`chapter-resources ${level === 1 ? 'level-1-resources' : ''} ${readOnly ? 'read-only-resources' : ''}`}>\n                    {/* 显示关联的课件 */}\n                    {hasAttachments && (\n                        <div className=\"resource-list\">\n                            {chapter.attachments.map((attachmentId, index) => (\n                                <div key={`att-${index}`} className=\"resource-item attachment-item\">\n                                    <span className=\"resource-type-marker file-marker\"></span>\n                                    <span className=\"resource-title\">{getAttachmentName(attachmentId)}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                    {/* 显示关联的考题 */}\n                    {hasQuizzes && (\n                        <div className=\"resource-list\">\n                            {chapter.quizzes.map((quizId, index) => (\n                                <div key={`quiz-${index}`} className=\"resource-item quiz-item\">\n                                    <span className=\"resource-type-marker quiz-marker\"></span>\n                                    <span className=\"resource-title\">{getQuizName(quizId)}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* 删除确认对话框 */}\n            <ConfirmDialog\n                isOpen={showDeleteConfirm}\n                title=\"删除确认\"\n                message={`确定要删除\"${chapter.name}\"章节吗？`}\n                onConfirm={confirmDelete}\n                onCancel={cancelDelete}\n            />\n        </div>\n    );\n}\n\n// 章节树组件\nfunction ChapterTree({\n    chapters,\n    selectedChapterId,\n    onSelectChapter,\n    onAddSubChapter,\n    onDeleteChapter,\n    readOnly = false // 添加只读模式参数，默认为false\n}) {\n    // 获取顶级章节\n    const rootChapters = chapters.filter(chapter => !chapter.parentId);\n\n    // 排序顶级章节\n    const sortedRootChapters = [...rootChapters].sort((a, b) => a.sort - b.sort);\n\n    // 获取子章节\n    const getChildChapters = (parentId) => {\n        return chapters\n            .filter(chapter => chapter.parentId === parentId)\n            .sort((a, b) => {\n                const aOrder = parseInt(a.id.split('.')[1]);\n                const bOrder = parseInt(b.id.split('.')[1]);\n                return aOrder - bOrder;\n            });\n    };\n\n    // 如果没有一级章节，显示空状态\n    if (sortedRootChapters.length === 0) {\n        return (\n            <div className=\"chapter-tree-empty-state\">\n                <div className=\"empty-state-icon\">📚</div>\n                <div className=\"empty-state-text\">暂无章节数据</div>\n                {!readOnly && <div className=\"empty-state-hint\">点击\"添加一级目录\"按钮创建章节</div>}\n            </div>\n        );\n    }\n\n\n    // 自定义章节标题格式化函数\n    const formatChapterTitle = (chapter, index, parentIndex = null) => {\n        if (!parentIndex) {\n            // 一级章节：第X章 名称\n            return `第${index}章 ${chapter.name}`;\n        } else {\n            // 二级章节：X.Y 名称\n            return `${parentIndex}.${index} ${chapter.name}`;\n        }\n    };\n\n    return (\n        <div className={`chapter-tree ${readOnly ? 'read-only' : ''}`}>\n               {sortedRootChapters.map((rootChapter, rootIndex) => {\n                const parentIndex = rootIndex + 1; // 从1开始的父章节索引\n\n                return (\n                    <div key={rootChapter.id} className=\"chapter-root\">\n                        <ChapterItem\n                            chapter={{\n                                ...rootChapter,\n                                displayTitle: formatChapterTitle(rootChapter, parentIndex)\n                            }}\n                            selected={selectedChapterId === rootChapter.id}\n                            onSelect={readOnly ? () => { } : onSelectChapter}\n                            onAddSubChapter={onAddSubChapter}\n                            onDelete={onDeleteChapter}\n                            level={1}\n                            readOnly={readOnly}\n                        />\n\n                   <div className=\"chapter-children\">\n                            {getChildChapters(rootChapter.id).map((childChapter, childIndex) => (\n                                <ChapterItem\n                                    key={childChapter.id}\n                                    chapter={{\n                                        ...childChapter,\n                                        displayTitle: formatChapterTitle(childChapter, childIndex + 1, parentIndex)\n                                    }}\n                                    selected={selectedChapterId === childChapter.id}\n                                    onSelect={readOnly ? () => { } : onSelectChapter}\n                                    onAddSubChapter={onAddSubChapter}\n                                    onDelete={onDeleteChapter}\n                                    level={2}\n                                    readOnly={readOnly}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nfunction ChapterTreePage() {\n    // 章节数据状态\n    const [chapters, setChapters] = useState(appsmith?.model?.chapters ?? []);\n\n    // 当前选中的章节ID\n    const [selectedChapterId, setSelectedChapterId] = useState(null);\n    // 是否显示编辑器\n    const [showEditor, setShowEditor] = useState(false);\n\n    useEffect(() => {\n        appsmith.onModelChange((model, prevModel) => {\n            if (JSON.stringify(model.chapters) !== JSON.stringify(prevModel?.chapters)) {\n                setChapters(model.chapters ?? []);\n            }\n        })\n    }, []);\n\n\n    // 添加新章节\n    const addChapter = (parentId = null) => {\n        // 如果是添加一级章节\n        if (parentId === null) {\n            // 获取当前最大的一级章节数量\n            const rootChapters = chapters.filter(c => c.parentId === null);\n            const newOrder = rootChapters.length + 1;\n            const newChapter = {\n                id: newOrder.toString(),\n                name: '新章节名称',\n                sort: newOrder,\n                parentId: null,\n                attachments: [], // 确保初始化为空数组\n                quizzes: []      // 确保初始化为空数组\n            };\n            setChapters([...chapters, newChapter]);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: [...chapters, newChapter] })\n            setSelectedChapterId(newChapter.id);\n            // 显示编辑器\n            setShowEditor(true);\n        } else {\n            // 如果是添加二级章节（子章节）\n            // 获取父章节\n            const parentChapter = chapters.find(c => c.id === parentId);\n            if (!parentChapter) return;\n\n            // 获取该父章节下的所有子章节\n            const childChapters = chapters.filter(c => c.parentId === parentId);\n            // 计算新子章节的顺序\n            const newChildOrder = childChapters.length + 1;\n            // 创建新子章节\n            const newChildChapter = {\n                id: `${parentId}.${newChildOrder}`,\n                name: '新小节名称',\n                sort: newChildOrder,\n                parentId: parentId,\n                attachments: [], // 确保初始化为空数组\n                quizzes: []      // 确保初始化为空数组\n            };\n\n            setChapters([...chapters, newChildChapter]);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: [...chapters, newChildChapter] })\n            setSelectedChapterId(newChildChapter.id);\n            // 显示编辑器\n            setShowEditor(true);\n        }\n    };\n\n\n    // 删除章节\n    const deleteChapter = (chapterId) => {\n        // 找到要删除的章节\n        const chapterToDelete = chapters.find(c => c.id === chapterId);\n        if (!chapterToDelete) return;\n\n        // 如果是一级章节，同时删除其所有子章节\n        if (chapterToDelete.parentId === null) {\n            const updatedChapters = chapters.filter(\n                c => c.id !== chapterId && c.parentId !== chapterId\n            );\n\n            // 重新排序剩余的一级章节\n            const rootChapters = updatedChapters\n                .filter(c => c.parentId === null)\n                .sort((a, b) => a.sort - b.sort);\n\n            // 更新一级章节的ID和顺序\n            rootChapters.forEach((chapter, index) => {\n                const newOrder = index + 1;\n                const oldId = chapter.id;\n                chapter.id = newOrder.toString();\n                chapter.sort = newOrder;\n\n                // 同时更新该章节下所有子章节的ID\n                updatedChapters\n                    .filter(c => c.parentId === oldId)\n                    .forEach(childChapter => {\n                        childChapter.parentId = chapter.id;\n                        childChapter.id = `${chapter.id}.${childChapter.sort}`;\n                    });\n            });\n\n            setChapters(updatedChapters);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: updatedChapters })\n\n            // 如果删除的是当前选中的章节，取消选中并隐藏编辑器\n            if (selectedChapterId === chapterId) {\n                setSelectedChapterId(null);\n                setShowEditor(false);\n            }\n        } else {\n            // 如果是二级章节，只删除该章节\n            const parentId = chapterToDelete.parentId;\n            const updatedChapters = chapters.filter(c => c.id !== chapterId);\n\n            // 重新排序同一父章节下的所有子章节\n            const siblingChapters = updatedChapters\n                .filter(c => c.parentId === parentId)\n                .sort((a, b) => a.sort - b.sort);\n\n            // 更新子章节的ID和顺序\n            siblingChapters.forEach((chapter, index) => {\n                const newOrder = index + 1;\n                chapter.id = `${parentId}.${newOrder}`;\n                chapter.sort = newOrder;\n            });\n\n            setChapters(updatedChapters);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: updatedChapters })\n            // 如果删除的是当前选中的章节，选择父章节\n            if (selectedChapterId === chapterId) {\n                setSelectedChapterId(parentId);\n            }\n        }\n    };\n\n    // 选中章节\n    const selectChapter = (chapterId) => {\n        setSelectedChapterId(chapterId);\n        setShowEditor(true); // 选中章节时显示编辑器\n    };\n\n    return (\n        <div className=\"chapter-tree-page\">\n            <div className=\"app-main\">\n                <div className={`chapter-panel ${!showEditor ? 'full-width' : ''}`}>\n                    <div className=\"chapter-tree-container\">\n                        <ChapterTree\n                            chapters={chapters}\n                            selectedChapterId={selectedChapterId}\n                            onSelectChapter={selectChapter}\n                            onAddSubChapter={addChapter}\n                            onDeleteChapter={deleteChapter}\n                            readOnly={true} // 根据模式设置是否只读\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n\nappsmith.onReady(() => {\n    /*\n         * This handler function will get called when parent application is ready.\n         * Initialize your component here\n         * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n         */\n    ReactDOM.render(<ChapterTreePage />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "8gikfo5f7n",
  "widgetName": "CustomView"
}