{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "0px",
  "borderWidth": "0",
  "bottomRow": 78,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{utils}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "handleSaveChapter"
    }
  ],
  "events": [
    "handleSaveChapter"
  ],
  "handleSaveChapter": "{{utils.handleSaveChapter(chapters);}}",
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "zexwd3vvp6",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 52,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 18,
  "mobileTopRow": 22,
  "needsErrorInfo": false,
  "parentColumnSpace": 27.671875,
  "parentId": "cqz9jawqyt",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n/* 应用容器 */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  font-family: Arial, sans-serif;\n  background-color: #f5f5f5;\n  padding: 16px;\n  box-sizing: border-box;\n}\n\n/* 主内容区域 */\n.app-main {\n  display: flex;\n  flex: 1;\n  gap: 16px;\n  height: 100%;\n}\n\n.chapter-tree-page {\n  height: 100vh;\n}\n\n/* 章节面板 */\n.chapter-panel {\n  width: 66.7%;\n  background-color: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  transition: width 0.3s;\n}\n\n/* 全宽章节面板 */\n.chapter-panel.full-width {\n  width: 100%;\n}\n\n/* 面板头部 */\n.panel-header {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px 16px 0 16px;\n  height: 30px;\n  line-height: 30px;\n}\n\n/* 面板标题 */\n.panel-title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.85);\n}\n\n/* 添加一级目录按钮 */\n.add-root-button {\n  padding: 5px 12px;\n  background-color: #fff;\n  color: #3949ab;\n  border: 1px solid #3949ab;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.add-root-button:hover {\n  background-color: rgba(57, 73, 171, 0.062745098);\n}\n\n/* 章节树容器 */\n.chapter-tree-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n/* 编辑器面板 */\n.editor-panel {\n  flex: 1;\n  background-color: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 空编辑器状态 */\n.empty-editor {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  color: #888;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 6px 15px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 20px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 标题样式 */\nh2 {\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  margin-bottom: 16px;\n  font-weight: 500;\n}\n\n/* 面板操作区域 */\n.panel-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 模式切换按钮 */\n.mode-toggle-button {\n  padding: 5px 12px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.mode-toggle-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节编辑器 */\n.chapter-editor {\n  padding: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 40px); /* 减去内边距 */\n}\n\n/* 编辑器标题 */\n.editor-header {\n  margin-bottom: 24px;\n  border-bottom: 1px solid #f0f0f0;\n  padding-bottom: 16px;\n}\n\n.editor-header h2 {\n  margin: 0;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n/* 编辑器表单 */\n.editor-form {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden; /* 防止内容溢出 */\n}\n\n/* 表单内容区域 */\n.form-content {\n  flex: 1;\n  overflow-y: auto; /* 只有内容区滚动 */\n  margin-bottom: 16px; /* 给底部按钮留空间 */\n}\n\n/* 表单组 */\n.form-group {\n  width: 100%;\n  margin-bottom: 24px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n  word-break: break-all;\n}\n\n/* 输入框样式 */\n.form-control {\n  width: calc(100% - 32px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 32px;\n  line-height: 1.5;\n}\n\n.form-control:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 选择框列表 */\n.checkbox-list {\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  padding: 8px 12px;\n}\n\n/* 选择框项目 */\n.checkbox-item {\n  padding: 8px 0;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.checkbox-item:last-child {\n  border-bottom: none;\n}\n\n/* 选择框标签 */\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.checkbox-label input {\n  margin-right: 8px;\n}\n\n/* 表单操作区域 */\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  /* 移除绝对定位，使用常规流布局 */\n  margin-top: auto; /* 推到底部 */\n}\n\n/* 保存按钮 */\n.save-button {\n  padding: 0 15px;\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 32px;\n}\n\n.save-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 0 15px;\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 30px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节项目 */\n.chapter-item {\n  padding: 12px 15px;\n  background-color: white;\n  border: 1px solid #f0f0f0;\n  border-radius: 2px;\n  cursor: pointer;\n  transition: all 0.2s;\n  margin-bottom: 8px;\n}\n\n.chapter-item:hover {\n  background-color: #f9f9f9;\n}\n\n.chapter-item.selected {\n  background-color: #e6f7ff;\n  border-left: 3px solid #1890ff;\n}\n\n/* 章节内容 */\n.chapter-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n/* 章节标题 */\n.chapter-title {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n}\n\n/* 章节操作按钮 */\n.chapter-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 章节资源列表 */\n.chapter-resources {\n  margin-left: 30px;\n  padding: 5px 0;\n}\n\n/* 资源列表 */\n.resource-list {\n  margin-bottom: 5px;\n}\n\n/* 资源项目 */\n.resource-item {\n  padding: 6px 10px;\n  background-color: #f9f9f9;\n  border-radius: 3px;\n  margin-bottom: 4px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  color: #666;\n  transition: all 0.2s;\n  position: relative;\n  padding-left: 6px; /* 为标记留出空间 */\n}\n\n.resource-item:hover {\n  background-color: #f0f0f0;\n}\n\n/* 资源类型标记 */\n.resource-type-marker {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 4px;\n  height: 100%;\n  border-radius: 2px 0 0 2px;\n}\n\n/* 资源标题 */\n.resource-title {\n  margin-left: 8px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n/* 移除之前的样式 */\n.attachment-item,\n.quiz-item {\n  border-left: none;\n}\n\n/* 课件标签样式 */\n.attachment-item::before {\n  content: \"课件\";\n  display: inline-block;\n  background-color: #22c55e;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n  white-space: nowrap;\n}\n\n/* 考题标签样式 */\n.quiz-item::before {\n  content: \"考试\";\n  display: inline-box;\n  background-color: #eba400;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n}\n\n/* 一级章节 */\n.level-1 {\n  font-weight: 500;\n  background-color: #fafafa;\n  border-left: 3px solid #d9d9d9;\n}\n\n.level-1.selected {\n  border-left: 3px solid #1890ff;\n}\n\n/* 二级章节 */\n.level-2 {\n  font-weight: normal;\n  background-color: #ffffff;\n  padding-left: 20px;\n  margin-left: 15px;\n  border-left: 3px solid #f0f0f0;\n}\n\n.level-2.selected {\n  border-left: 3px solid #52c41a;\n}\n\n/* 添加子章节按钮 */\n.add-sub-button {\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.add-sub-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 删除按钮 */\n.delete-button {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.delete-button:hover {\n  color: #ff4d4f;\n  border-color: #ff4d4f;\n}\n\n/* 一级章节的资源列表样式调整 */\n.level-1-resources {\n  margin-left: 10px;\n  border-left: 3px solid #d9d9d9;\n  padding-left: 20px;\n}\n\n/* 只读模式下的资源样式 */\n.read-only-resources .resource-item {\n  cursor: default;\n}\n\n.read-only-resources .resource-item:hover {\n  background-color: #f9f9f9; /* 保持原背景色，不改变 */\n}\n\n/* 章节树样式 */\n.chapter-tree {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n/* 章节组样式 */\n.chapter-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5px;\n}\n\n/* 子章节区域样式 */\n.sub-chapters {\n  margin-left: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-top: 5px;\n  border-left: 1px dashed #d9d9d9;\n  margin-left: 10px;\n  padding-left: 20px;\n}\n\n/* 只读模式样式 */\n.chapter-tree.read-only .chapter-item {\n  cursor: default;\n}\n\n.chapter-tree.read-only .chapter-item:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only {\n  cursor: default;\n}\n\n.chapter-item.read-only:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only.selected {\n  background-color: transparent;\n  font-weight: normal;\n  color: inherit;\n}\n\n.confirm-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.confirm-dialog {\n  background-color: white;\n  padding: 24px;\n  border-radius: 2px;\n  width: 320px;\n  box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08);\n}\n\n.confirm-dialog-title {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n}\n\n.confirm-dialog-message {\n  margin-bottom: 24px;\n  color: rgba(0, 0, 0, 0.65);\n  font-size: 14px;\n}\n\n.confirm-dialog-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n}\n\n.confirm-dialog-cancel {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 30px;\n  background-color: white;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.65);\n}\n\n.confirm-dialog-cancel:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n.confirm-dialog-confirm {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 32px;\n  background-color: #3949ab;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: white;\n}\n\n.confirm-dialog-confirm:hover {\n  background-color: #5c6bc0;\n}\n\n/* 禁用的多选框标签样式 */\n.checkbox-label.disabled {\n  color: #999;\n  cursor: not-allowed;\n}\n\n/* 已被使用标记的样式 */\n.resource-used-mark {\n  margin-left: 5px;\n  font-size: 12px;\n  color: #ff6b6b;\n  font-style: italic;\n}\n\n/* 章节树空状态样式 */\n.chapter-tree-empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0;\n  color: #999;\n  text-align: center;\n}\n\n.empty-state-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n  color: #d9d9d9;\n}\n\n.empty-state-text {\n  font-size: 16px;\n  margin-bottom: 8px;\n  color: #666;\n}\n\n.empty-state-hint {\n  font-size: 14px;\n  color: #999;\n}\n\n/* 资源列表空状态样式 */\n.resource-empty-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  color: #999;\n  font-size: 14px;\n  background-color: #fafafa;\n  border-radius: 3px;\n}\n\n/* 必填标识样式 */\n.required {\n  color: #ff4d4f;\n  margin-right: 4px;\n  font-weight: normal;\n}\n\n/* 输入提示样式 */\n.input-hint {\n  margin-top: 4px;\n  color: #888;\n  font-size: 12px;\n}\n\n/* 禁用按钮样式 */\n.save-button:disabled {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.25);\n  border-color: #d9d9d9;\n  text-shadow: none;\n  box-shadow: none;\n  cursor: not-allowed;\n}\n\n/* 搜索容器样式 */\n.search-container {\n  margin-bottom: 8px;\n  position: relative;\n}\n\n/* 搜索输入框样式 */\n.search-input {\n  width: calc(100% - 24px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 28px;\n  line-height: 1.5;\n  padding-right: 30px; /* 为清除按钮留出空间 */\n}\n\n.search-input:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 搜索清除按钮样式 */\n.search-clear-button {\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: transparent;\n  border: none;\n  color: #999;\n  font-size: 16px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 50%;\n  padding: 0;\n}\n\n.search-clear-button:hover {\n  color: #666;\n  background-color: #f0f0f0;\n}\n\n/* 无匹配结果状态 */\n.empty-state-text {\n  text-align: center;\n  padding: 10px 0;\n  color: #999;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// 定义全局 appsmith 变量，避免 'not defined' 错误\nconst appsmith = window.appsmith;\n\n// 模拟的可选课件数据\nconst AVAILABLE_ATTACHMENTS = [];\n\n// 模拟的可选考题数据\nconst AVAILABLE_QUIZZES = [{\n  id: 1,\n  name: \"考题1：Java基础知识测试\"\n}, {\n  id: 2,\n  name: \"考题2：面向对象概念理解\"\n}, {\n  id: 3,\n  name: \"考题3：Java语法练习\"\n}, {\n  id: 4,\n  name: \"考题4：编程实践题\"\n}, {\n  id: 5,\n  name: \"考题5：综合应用能力测试\"\n}];\nfunction ChapterEditor({\n  chapter,\n  onUpdateChapter,\n  onCancel,\n  allChapters\n}) {\n  // 本地状态，存储编辑中的章节信息\n  const [editedChapter, setEditedChapter] = useState({\n    ...chapter\n  });\n  // 添加状态跟踪标题是否有效\n  const [isTitleValid, setIsTitleValid] = useState(!!chapter.name.trim());\n  // 添加状态跟踪输入中的中文\n  const [isComposing, setIsComposing] = useState(false);\n  // 添加关联课件搜索状态\n  const [attachmentSearch, setAttachmentSearch] = useState('');\n  // 添加关联考题搜索状态\n  const [quizSearch, setQuizSearch] = useState('');\n\n  // 当选中的章节变化时，更新本地状态\n  useEffect(() => {\n    setEditedChapter({\n      ...chapter\n    });\n    setIsTitleValid(!!chapter.name.trim());\n    // 重置搜索框\n    setAttachmentSearch('');\n    setQuizSearch('');\n  }, [chapter]);\n\n  // 检查资源是否已被其他章节使用\n  const isResourceUsed = (resourceId, resourceType) => {\n    // 排除当前编辑的章节\n    return allChapters.some(ch => ch.id !== chapter.id && ch[resourceType] && ch[resourceType].includes(resourceId));\n  };\n\n  // 处理标题变化\n  const handleTitleChange = e => {\n    // 获取输入值\n    let value = e.target.value;\n\n    // 判断是否符合中文、大小写字母、数字\n    value = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n    // 限制长度为15个字符\n    if (value.length > 15) {\n      value = value.substring(0, 15);\n    }\n    setEditedChapter({\n      ...editedChapter,\n      name: value\n    });\n\n    // 检查标题是否有效（非空）\n    setIsTitleValid(!!value.trim());\n  };\n\n  // 处理中文输入开始\n  const handleCompositionStart = () => {\n    setIsComposing(true);\n  };\n\n  // 处理中文输入结束\n  const handleCompositionEnd = e => {\n    setIsComposing(false);\n\n    // 中文输入完成后，再次检查字符限制\n    let value = e.target.value;\n    value = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n    if (value.length > 15) {\n      value = value.substring(0, 15);\n\n      // 直接更新输入框的值\n      e.target.value = value;\n\n      // 更新章节名称\n      setEditedChapter({\n        ...editedChapter,\n        name: value\n      });\n    }\n  };\n\n  // 处理输入前事件，用于在输入前检查是否会超出限制\n  const handleBeforeInput = e => {\n    if (editedChapter.name.length >= 15) {\n      // 如果已经达到15个字符，阻止进一步输入\n      e.preventDefault();\n    }\n  };\n\n  // 处理粘贴事件\n  const handlePaste = e => {\n    // 获取粘贴的文本\n    const pasteText = e.clipboardData.getData('text');\n\n    // 过滤不符合规则的字符\n    const filteredText = pasteText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n    // 当前文本长度\n    const currentLength = editedChapter.name.length;\n    if (currentLength >= 15) {\n      // 如果已经达到15个字符，阻止粘贴\n      e.preventDefault();\n      return;\n    }\n\n    // 可以粘贴的最大长度\n    const maxPasteLength = 15 - currentLength;\n\n    // 截取符合长度限制的部分\n    const truncatedText = filteredText.substring(0, maxPasteLength);\n    if (truncatedText) {\n      // 阻止默认粘贴行为\n      e.preventDefault();\n\n      // 手动更新输入值\n      const newValue = editedChapter.name + truncatedText;\n      setEditedChapter({\n        ...editedChapter,\n        name: newValue\n      });\n      setIsTitleValid(!!newValue.trim());\n    }\n  };\n\n  // 处理课件选择变化\n  const handleAttachmentChange = attachmentId => {\n    const currentAttachments = [...editedChapter.attachments];\n\n    // 如果已经选中，则取消选择；否则添加\n    if (currentAttachments.includes(attachmentId)) {\n      const newAttachments = currentAttachments.filter(id => id !== attachmentId);\n      setEditedChapter({\n        ...editedChapter,\n        attachments: newAttachments\n      });\n    } else {\n      setEditedChapter({\n        ...editedChapter,\n        attachments: [...currentAttachments, attachmentId]\n      });\n    }\n  };\n\n  // 处理考题选择变化\n  const handleQuizChange = quizId => {\n    const currentQuizzes = [...editedChapter.quizzes];\n\n    // 如果已经选中，则取消选择；否则添加\n    if (currentQuizzes.includes(quizId)) {\n      const newQuizzes = currentQuizzes.filter(id => id !== quizId);\n      setEditedChapter({\n        ...editedChapter,\n        quizzes: newQuizzes\n      });\n    } else {\n      setEditedChapter({\n        ...editedChapter,\n        quizzes: [...currentQuizzes, quizId]\n      });\n    }\n  };\n\n  // 处理课件搜索输入\n  const handleAttachmentSearch = e => {\n    // 获取输入值\n    let value = e.target.value;\n\n    // 只允许中文、大小写字母、数字\n    value = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n    setAttachmentSearch(value);\n  };\n\n  // 清除课件搜索内容\n  const clearAttachmentSearch = () => {\n    setAttachmentSearch('');\n  };\n\n  // 处理考题搜索输入\n  const handleQuizSearch = e => {\n    // 获取输入值\n    let value = e.target.value;\n\n    // 只允许中文、大小写字母、数字\n    value = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n    setQuizSearch(value);\n  };\n\n  // 清除考题搜索内容\n  const clearQuizSearch = () => {\n    setQuizSearch('');\n  };\n\n  // 过滤课件列表\n  const filteredAttachments = (appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS).filter(attachment => attachment.name.toLowerCase().includes(attachmentSearch.toLowerCase()));\n\n  // 过滤考题列表\n  const filteredQuizzes = AVAILABLE_QUIZZES.filter(quiz => quiz.name.toLowerCase().includes(quizSearch.toLowerCase()));\n\n  // 处理保存\n  const handleSave = () => {\n    // 标题验证\n    if (editedChapter.name.trim() === '') {\n      alert('章节标题不能为空');\n      return;\n    }\n\n    // 验证所选资源是否有冲突\n    const attachmentConflicts = [];\n    const quizConflicts = [];\n    editedChapter.attachments.forEach(attachmentId => {\n      if (isResourceUsed(attachmentId, 'attachments')) {\n        const courseWare = appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS;\n        const attachment = courseWare.find(a => a.id === attachmentId);\n        attachmentConflicts.push(attachment ? attachment.name : `课件ID: ${attachmentId}`);\n      }\n    });\n    editedChapter.quizzes.forEach(quizId => {\n      if (isResourceUsed(quizId, 'quizzes')) {\n        const quiz = AVAILABLE_QUIZZES.find(q => q.id === quizId);\n        quizConflicts.push(quiz ? quiz.name : `考题ID: ${quizId}`);\n      }\n    });\n\n    // 如果有冲突，显示错误信息并阻止保存\n    if (attachmentConflicts.length > 0 || quizConflicts.length > 0) {\n      let errorMessage = '以下资源已被其他章节使用，不能重复选择:\\n\\n';\n      if (attachmentConflicts.length > 0) {\n        errorMessage += '课件:\\n- ' + attachmentConflicts.join('\\n- ') + '\\n\\n';\n      }\n      if (quizConflicts.length > 0) {\n        errorMessage += '考题:\\n- ' + quizConflicts.join('\\n- ');\n      }\n      alert(errorMessage);\n      return;\n    }\n\n    // 无冲突，可以保存\n    onUpdateChapter(editedChapter);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-editor\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-header\"\n  }, /*#__PURE__*/React.createElement(\"h2\", null, \"\\u7F16\\u8F91\\u7AE0\\u8282\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-form\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-content\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"\\u7AE0\\u8282\\u6807\\u9898 \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"required\"\n  }, \"*\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: editedChapter.name,\n    onChange: handleTitleChange,\n    onPaste: handlePaste,\n    onCompositionStart: handleCompositionStart,\n    onCompositionEnd: handleCompositionEnd,\n    onBeforeInput: handleBeforeInput,\n    placeholder: \"\\u8F93\\u5165\\u7AE0\\u8282\\u6807\\u9898\",\n    className: \"form-control\",\n    maxLength: 15 // 设置最大长度\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-hint\"\n  }, /*#__PURE__*/React.createElement(\"small\", null, \"\\u5141\\u8BB8\\u4E2D\\u6587\\u3001\\u5B57\\u6BCD\\u3001\\u6570\\u5B57\\uFF0C\\u6700\\u591A15\\u4E2A\\u5B57\\u7B26 (\", editedChapter.name.length, \"/15)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"\\u5173\\u8054\\u8BFE\\u4EF6\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"search-input\",\n    placeholder: \"\\u641C\\u7D22\\u8BFE\\u4EF6\",\n    value: attachmentSearch,\n    onChange: handleAttachmentSearch\n  }), attachmentSearch && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"search-clear-button\",\n    onClick: clearAttachmentSearch,\n    title: \"\\u6E05\\u9664\\u641C\\u7D22\"\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-list\"\n  }, filteredAttachments.length > 0 ? filteredAttachments.map(attachment => {\n    // 检查是否已被其他章节使用\n    const isUsedByOthers = isResourceUsed(attachment.id, 'attachments');\n    // 是否在当前章节中选中\n    const isChecked = editedChapter.attachments.includes(attachment.id);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: attachment.id,\n      className: \"checkbox-item\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: `checkbox-label ${isUsedByOthers && !isChecked ? 'disabled' : ''}`\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: isChecked,\n      onChange: () => handleAttachmentChange(attachment.id),\n      disabled: isUsedByOthers && !isChecked\n    }), /*#__PURE__*/React.createElement(\"span\", null, attachment.name), isUsedByOthers && !isChecked && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"resource-used-mark\"\n    }, \"(\\u5DF2\\u88AB\\u4F7F\\u7528)\")));\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-empty-state\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empty-state-text\"\n  }, \"\\u65E0\\u5339\\u914D\\u8BFE\\u4EF6\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"\\u5173\\u8054\\u8003\\u9898\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"search-input\",\n    placeholder: \"\\u641C\\u7D22\\u8003\\u9898\",\n    value: quizSearch,\n    onChange: handleQuizSearch\n  }), quizSearch && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"search-clear-button\",\n    onClick: clearQuizSearch,\n    title: \"\\u6E05\\u9664\\u641C\\u7D22\"\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-list\"\n  }, filteredQuizzes.length > 0 ? filteredQuizzes.map(quiz => {\n    // 检查是否已被其他章节使用\n    const isUsedByOthers = isResourceUsed(quiz.id, 'quizzes');\n    // 是否在当前章节中选中\n    const isChecked = editedChapter.quizzes.includes(quiz.id);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: quiz.id,\n      className: \"checkbox-item\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: `checkbox-label ${isUsedByOthers && !isChecked ? 'disabled' : ''}`\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: isChecked,\n      onChange: () => handleQuizChange(quiz.id),\n      disabled: isUsedByOthers && !isChecked\n    }), /*#__PURE__*/React.createElement(\"span\", null, quiz.name), isUsedByOthers && !isChecked && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"resource-used-mark\"\n    }, \"(\\u5DF2\\u88AB\\u4F7F\\u7528)\")));\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-empty-state\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empty-state-text\"\n  }, \"\\u65E0\\u5339\\u914D\\u8003\\u9898\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-actions\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cancel-button\",\n    onClick: onCancel\n  }, \"\\u53D6\\u6D88\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"save-button\",\n    onClick: handleSave,\n    disabled: !isTitleValid // 根据标题有效性禁用按钮\n    ,\n    style: !isTitleValid ? {\n      opacity: 0.5,\n      cursor: 'not-allowed'\n    } : {}\n  }, \"\\u4FDD\\u5B58\"))));\n}\nfunction ConfirmDialog({\n  isOpen,\n  name,\n  message,\n  onConfirm,\n  onCancel\n}) {\n  if (!isOpen) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog-overlay\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog\"\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"confirm-dialog-title\"\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"confirm-dialog-message\"\n  }, message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-dialog-actions\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-dialog-cancel\",\n    onClick: onCancel\n  }, \"\\u53D6\\u6D88\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-dialog-confirm\",\n    onClick: onConfirm\n  }, \"\\u786E\\u5B9A\"))));\n}\n\n// 章节项组件\nfunction ChapterItem({\n  chapter,\n  selected,\n  onSelect,\n  onAddSubChapter,\n  onDelete,\n  level,\n  readOnly = false // 添加只读模式参数，默认为false\n}) {\n  // 添加状态控制确认对话框显示\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  // 处理章节选择\n  const handleSelect = () => {\n    if (!readOnly) {\n      onSelect(chapter.id);\n    }\n  };\n\n  // 处理添加子章节\n  const handleAddSubChapter = e => {\n    e.stopPropagation(); // 阻止事件冒泡，避免触发章节选择\n    onAddSubChapter(chapter.id);\n  };\n\n  // 处理删除按钮点击\n  const handleDeleteClick = e => {\n    e.stopPropagation(); // 阻止事件冒泡\n    setShowDeleteConfirm(true); // 显示确认对话框\n  };\n\n  // 确认删除\n  const confirmDelete = () => {\n    setShowDeleteConfirm(false);\n    onDelete(chapter.id);\n  };\n\n  // 取消删除\n  const cancelDelete = () => {\n    setShowDeleteConfirm(false);\n  };\n\n  // 格式化章节标题\n  const formatTitle = () => {\n    // 对于一级章节，格式为\"第X章\"\n    if (level === 1) {\n      return `第${chapter.sort}章 ${chapter.name}`;\n    }\n\n    // 对于二级章节，格式为\"X.Y\"\n    return `${chapter.id} ${chapter.name}`;\n  };\n\n  // 辅助函数：根据ID查找对应的课件名称\n  const getAttachmentName = id => {\n    const courseWare = appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS;\n    const attachment = courseWare.find(a => a.id === id);\n    return attachment ? attachment.name : `未知课件(${id})`;\n  };\n\n  // 辅助函数：根据ID查找对应的考题名称\n  const getQuizName = id => {\n    const quiz = AVAILABLE_QUIZZES.find(q => q.id === id);\n    return quiz ? quiz.name : `未知考题(${id})`;\n  };\n\n  // 检查是否有关联的课件或考题\n  const hasAttachments = chapter.attachments && chapter.attachments.length > 0;\n  const hasQuizzes = chapter.quizzes && chapter.quizzes.length > 0;\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-item ${selected ? 'selected' : ''} level-${level} ${readOnly ? 'read-only' : ''}`,\n    onClick: handleSelect\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-content\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-name\"\n  }, chapter.displayTitle || formatTitle()), !readOnly && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-actions\"\n  }, level === 1 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"add-sub-button\",\n    onClick: handleAddSubChapter,\n    title: \"\\u6DFB\\u52A0\\u4E8C\\u7EA7\\u76EE\\u5F55\"\n  }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"delete-button\",\n    onClick: handleDeleteClick,\n    title: \"\\u5220\\u9664\\u7AE0\\u8282\"\n  }, \"\\xD7\")))), (hasAttachments || hasQuizzes) && /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-resources ${level === 1 ? 'level-1-resources' : ''} ${readOnly ? 'read-only-resources' : ''}`\n  }, hasAttachments && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-list\"\n  }, chapter.attachments.map((attachmentId, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `att-${index}`,\n    className: \"resource-item attachment-item\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-type-marker file-marker\"\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-title\"\n  }, getAttachmentName(attachmentId))))), hasQuizzes && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resource-list\"\n  }, chapter.quizzes.map((quizId, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `quiz-${index}`,\n    className: \"resource-item quiz-item\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-type-marker quiz-marker\"\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"resource-title\"\n  }, getQuizName(quizId)))))), /*#__PURE__*/React.createElement(ConfirmDialog, {\n    isOpen: showDeleteConfirm,\n    title: \"\\u5220\\u9664\\u786E\\u8BA4\",\n    message: `确定要删除\"${chapter.name}\"章节吗？`,\n    onConfirm: confirmDelete,\n    onCancel: cancelDelete\n  }));\n}\n\n// 章节树组件\nfunction ChapterTree({\n  chapters,\n  selectedChapterId,\n  onSelectChapter,\n  onAddSubChapter,\n  onDeleteChapter,\n  readOnly = false // 添加只读模式参数，默认为false\n}) {\n  // 获取顶级章节\n  const rootChapters = chapters.filter(chapter => !chapter.parentId);\n\n  // 排序顶级章节\n  const sortedRootChapters = [...rootChapters].sort((a, b) => a.sort - b.sort);\n\n  // 获取子章节\n  const getChildChapters = parentId => {\n    return chapters.filter(chapter => chapter.parentId === parentId).sort((a, b) => {\n      const aOrder = parseInt(a.id.split('.')[1]);\n      const bOrder = parseInt(b.id.split('.')[1]);\n      return aOrder - bOrder;\n    });\n  };\n\n  // 如果没有一级章节，显示空状态\n  if (sortedRootChapters.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chapter-tree-empty-state\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-icon\"\n    }, \"\\uD83D\\uDCDA\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-text\"\n    }, \"\\u6682\\u65E0\\u7AE0\\u8282\\u6570\\u636E\"), !readOnly && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-state-hint\"\n    }, \"\\u70B9\\u51FB\\\"\\u6DFB\\u52A0\\u4E00\\u7EA7\\u76EE\\u5F55\\\"\\u6309\\u94AE\\u521B\\u5EFA\\u7AE0\\u8282\"));\n  }\n\n  // 自定义章节标题格式化函数\n  const formatChapterTitle = (chapter, index, parentIndex = null) => {\n    if (!parentIndex) {\n      // 一级章节：第X章 名称\n      return `第${index}章 ${chapter.name}`;\n    } else {\n      // 二级章节：X.Y 名称\n      return `${parentIndex}.${index} ${chapter.name}`;\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-tree ${readOnly ? 'read-only' : ''}`\n  }, sortedRootChapters.map((rootChapter, rootIndex) => {\n    const parentIndex = rootIndex + 1; // 从1开始的父章节索引\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rootChapter.id,\n      className: \"chapter-root\"\n    }, /*#__PURE__*/React.createElement(ChapterItem, {\n      chapter: {\n        ...rootChapter,\n        displayTitle: formatChapterTitle(rootChapter, parentIndex)\n      },\n      selected: selectedChapterId === rootChapter.id,\n      onSelect: readOnly ? () => {} : onSelectChapter,\n      onAddSubChapter: onAddSubChapter,\n      onDelete: onDeleteChapter,\n      level: 1,\n      readOnly: readOnly\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chapter-children\"\n    }, getChildChapters(rootChapter.id).map((childChapter, childIndex) => /*#__PURE__*/React.createElement(ChapterItem, {\n      key: childChapter.id,\n      chapter: {\n        ...childChapter,\n        displayTitle: formatChapterTitle(childChapter, childIndex + 1, parentIndex)\n      },\n      selected: selectedChapterId === childChapter.id,\n      onSelect: readOnly ? () => {} : onSelectChapter,\n      onAddSubChapter: onAddSubChapter,\n      onDelete: onDeleteChapter,\n      level: 2,\n      readOnly: readOnly\n    }))));\n  }));\n}\nfunction ChapterTreePage() {\n  // 章节数据状态\n  const [chapters, setChapters] = useState(appsmith?.model?.chapters ?? []);\n  // 当前选中的章节ID\n  const [selectedChapterId, setSelectedChapterId] = useState(null);\n  // 是否显示编辑器\n  const [showEditor, setShowEditor] = useState(false);\n  // 是否为编辑模式\n  const [isEditMode, setIsEditMode] = useState(true);\n\n  // 获取当前选中的章节对象\n  const selectedChapter = chapters.find(chapter => chapter.id === selectedChapterId);\n\n  // 添加新章节\n  const addChapter = (parentId = null) => {\n    // 如果是添加一级章节\n    if (parentId === null) {\n      // 获取当前最大的一级章节数量\n      const rootChapters = chapters.filter(c => c.parentId === null);\n      const newOrder = rootChapters.length + 1;\n      const newChapter = {\n        id: newOrder.toString(),\n        name: '新章节名称',\n        sort: newOrder,\n        parentId: null,\n        attachments: [],\n        // 确保初始化为空数组\n        quizzes: [] // 确保初始化为空数组\n      };\n      setChapters([...chapters, newChapter]);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: [...chapters, newChapter]\n      });\n      setSelectedChapterId(newChapter.id);\n      // 显示编辑器\n      setShowEditor(true);\n    } else {\n      // 如果是添加二级章节（子章节）\n      // 获取父章节\n      const parentChapter = chapters.find(c => c.id === parentId);\n      if (!parentChapter) return;\n\n      // 获取该父章节下的所有子章节\n      const childChapters = chapters.filter(c => c.parentId === parentId);\n      // 计算新子章节的顺序\n      const newChildOrder = childChapters.length + 1;\n      // 创建新子章节\n      const newChildChapter = {\n        id: `${parentId}.${newChildOrder}`,\n        name: '新小节名称',\n        sort: newChildOrder,\n        parentId: parentId,\n        attachments: [],\n        // 确保初始化为空数组\n        quizzes: [] // 确保初始化为空数组\n      };\n      setChapters([...chapters, newChildChapter]);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: [...chapters, newChildChapter]\n      });\n      setSelectedChapterId(newChildChapter.id);\n      // 显示编辑器\n      setShowEditor(true);\n    }\n  };\n\n  // 更新章节内容\n  const updateChapter = updatedChapter => {\n    const updatedChapters = chapters.map(chapter => chapter.id === updatedChapter.id ? updatedChapter : chapter);\n    console.log(updatedChapters, \"updatedChapters\");\n    setChapters(updatedChapters);\n    appsmith.updateModel({\n      chapters: updatedChapters\n    });\n    appsmith.triggerEvent(\"handleSaveChapter\", {\n      chapters: updatedChapters\n    });\n    // 默认不选中任何章节，不显示编辑器\n    setSelectedChapterId(null);\n    setShowEditor(false);\n  };\n\n  // 删除章节\n  const deleteChapter = chapterId => {\n    // 找到要删除的章节\n    const chapterToDelete = chapters.find(c => c.id === chapterId);\n    if (!chapterToDelete) return;\n\n    // 如果是一级章节，同时删除其所有子章节\n    if (chapterToDelete.parentId === null) {\n      const updatedChapters = chapters.filter(c => c.id !== chapterId && c.parentId !== chapterId);\n\n      // 重新排序剩余的一级章节\n      const rootChapters = updatedChapters.filter(c => c.parentId === null).sort((a, b) => a.sort - b.sort);\n\n      // 更新一级章节的ID和顺序\n      rootChapters.forEach((chapter, index) => {\n        const newOrder = index + 1;\n        const oldId = chapter.id;\n        chapter.id = newOrder.toString();\n        chapter.sort = newOrder;\n\n        // 同时更新该章节下所有子章节的ID\n        updatedChapters.filter(c => c.parentId === oldId).forEach(childChapter => {\n          childChapter.parentId = chapter.id;\n          childChapter.id = `${chapter.id}.${childChapter.sort}`;\n        });\n      });\n      setChapters(updatedChapters);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: updatedChapters\n      });\n\n      // 如果删除的是当前选中的章节，取消选中并隐藏编辑器\n      if (selectedChapterId === chapterId) {\n        setSelectedChapterId(null);\n        setShowEditor(false);\n      }\n    } else {\n      // 如果是二级章节，只删除该章节\n      const parentId = chapterToDelete.parentId;\n      const updatedChapters = chapters.filter(c => c.id !== chapterId);\n\n      // 重新排序同一父章节下的所有子章节\n      const siblingChapters = updatedChapters.filter(c => c.parentId === parentId).sort((a, b) => a.sort - b.sort);\n\n      // 更新子章节的ID和顺序\n      siblingChapters.forEach((chapter, index) => {\n        const newOrder = index + 1;\n        chapter.id = `${parentId}.${newOrder}`;\n        chapter.sort = newOrder;\n      });\n      setChapters(updatedChapters);\n      appsmith.triggerEvent(\"handleSaveChapter\", {\n        chapters: updatedChapters\n      });\n      // 如果删除的是当前选中的章节，选择父章节\n      if (selectedChapterId === chapterId) {\n        setSelectedChapterId(parentId);\n      }\n    }\n  };\n\n  // 选中章节\n  const selectChapter = chapterId => {\n    setSelectedChapterId(chapterId);\n    setShowEditor(true); // 选中章节时显示编辑器\n  };\n\n  // 取消编辑\n  const handleCancelEdit = () => {\n    setShowEditor(false);\n    setSelectedChapterId(null);\n  };\n\n  // 切换编辑/展示模式\n  const toggleEditMode = () => {\n    if (!isEditMode) {\n      // 从展示模式切换到编辑模式\n      setIsEditMode(true);\n    } else {\n      // 从编辑模式切换到展示模式\n      setIsEditMode(false);\n      setShowEditor(false);\n      setSelectedChapterId(null);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-tree-page\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-main\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chapter-panel ${!showEditor ? 'full-width' : ''}`\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-header\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-actions\"\n  }, isEditMode && !showEditor && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"add-root-button\",\n    onClick: () => addChapter(null)\n  }, \"\\u6DFB\\u52A0\\u4E00\\u7EA7\\u76EE\\u5F55\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chapter-tree-container\"\n  }, /*#__PURE__*/React.createElement(ChapterTree, {\n    chapters: chapters,\n    selectedChapterId: selectedChapterId,\n    onSelectChapter: selectChapter,\n    onAddSubChapter: addChapter,\n    onDeleteChapter: deleteChapter,\n    readOnly: !isEditMode // 根据模式设置是否只读\n  }))), showEditor && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-panel\"\n  }, selectedChapter ? /*#__PURE__*/React.createElement(ChapterEditor, {\n    chapter: selectedChapter,\n    onUpdateChapter: updateChapter,\n    onCancel: handleCancelEdit,\n    allChapters: chapters // 传递所有章节信息用于检查\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empty-editor\"\n  }, /*#__PURE__*/React.createElement(\"p\", null, \"\\u8BF7\\u9009\\u62E9\\u8981\\u7F16\\u8F91\\u7684\\u7AE0\\u8282\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cancel-button\",\n    onClick: handleCancelEdit\n  }, \"\\u53D6\\u6D88\")))));\n}\nappsmith.onReady(() => {\n  /*\n       * This handler function will get called when parent application is ready.\n       * Initialize your component here\n       * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n       */\n  ReactDOM.render(/*#__PURE__*/React.createElement(ChapterTreePage, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 5,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* 应用容器 */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  font-family: Arial, sans-serif;\n  background-color: #f5f5f5;\n  padding: 16px;\n  box-sizing: border-box;\n}\n\n/* 主内容区域 */\n.app-main {\n  display: flex;\n  flex: 1;\n  gap: 16px;\n  height: 100%;\n}\n\n.chapter-tree-page {\n  height: 100vh;\n}\n\n/* 章节面板 */\n.chapter-panel {\n  width: 66.7%;\n  background-color: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  transition: width 0.3s;\n}\n\n/* 全宽章节面板 */\n.chapter-panel.full-width {\n  width: 100%;\n}\n\n/* 面板头部 */\n.panel-header {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px 16px 0 16px;\n  height: 30px;\n  line-height: 30px;\n}\n\n/* 面板标题 */\n.panel-title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.85);\n}\n\n/* 添加一级目录按钮 */\n.add-root-button {\n  padding: 5px 12px;\n  background-color: #fff;\n  color: #3949ab;\n  border: 1px solid #3949ab;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.add-root-button:hover {\n  background-color: #3949ab10;\n}\n\n/* 章节树容器 */\n.chapter-tree-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n/* 编辑器面板 */\n.editor-panel {\n  flex: 1;\n  background-color: white;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n/* 空编辑器状态 */\n.empty-editor {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  color: #888;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 6px 15px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 20px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 标题样式 */\nh2 {\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  margin-bottom: 16px;\n  font-weight: 500;\n}\n\n/* 面板操作区域 */\n.panel-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 模式切换按钮 */\n.mode-toggle-button {\n  padding: 5px 12px;\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 13px;\n  height: 28px;\n  line-height: 18px;\n}\n\n.mode-toggle-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节编辑器 */\n.chapter-editor {\n  padding: 20px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 40px); /* 减去内边距 */\n}\n\n/* 编辑器标题 */\n.editor-header {\n  margin-bottom: 24px;\n  border-bottom: 1px solid #f0f0f0;\n  padding-bottom: 16px;\n}\n\n.editor-header h2 {\n  margin: 0;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n/* 编辑器表单 */\n.editor-form {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden; /* 防止内容溢出 */\n}\n\n/* 表单内容区域 */\n.form-content {\n  flex: 1;\n  overflow-y: auto; /* 只有内容区滚动 */\n  margin-bottom: 16px; /* 给底部按钮留空间 */\n}\n\n/* 表单组 */\n.form-group {\n  width: 100%;\n  margin-bottom: 24px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n  word-break: break-all;\n}\n\n/* 输入框样式 */\n.form-control {\n  width: calc(100% - 32px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 32px;\n  line-height: 1.5;\n}\n\n.form-control:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 选择框列表 */\n.checkbox-list {\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  padding: 8px 12px;\n}\n\n/* 选择框项目 */\n.checkbox-item {\n  padding: 8px 0;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.checkbox-item:last-child {\n  border-bottom: none;\n}\n\n/* 选择框标签 */\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.checkbox-label input {\n  margin-right: 8px;\n}\n\n/* 表单操作区域 */\n.form-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  /* 移除绝对定位，使用常规流布局 */\n  margin-top: auto; /* 推到底部 */\n}\n\n/* 保存按钮 */\n.save-button {\n  padding: 0 15px;\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 32px;\n}\n\n.save-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 取消按钮 */\n.cancel-button {\n  padding: 0 15px;\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  height: 32px;\n  line-height: 30px;\n}\n\n.cancel-button:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n/* 章节项目 */\n.chapter-item {\n  padding: 12px 15px;\n  background-color: white;\n  border: 1px solid #f0f0f0;\n  border-radius: 2px;\n  cursor: pointer;\n  transition: all 0.2s;\n  margin-bottom: 8px;\n}\n\n.chapter-item:hover {\n  background-color: #f9f9f9;\n}\n\n.chapter-item.selected {\n  background-color: #e6f7ff;\n  border-left: 3px solid #1890ff;\n}\n\n/* 章节内容 */\n.chapter-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n/* 章节标题 */\n.chapter-title {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 14px;\n}\n\n/* 章节操作按钮 */\n.chapter-actions {\n  display: flex;\n  gap: 8px;\n}\n\n/* 章节资源列表 */\n.chapter-resources {\n  margin-left: 30px;\n  padding: 5px 0;\n}\n\n/* 资源列表 */\n.resource-list {\n  margin-bottom: 5px;\n}\n\n/* 资源项目 */\n.resource-item {\n  padding: 6px 10px;\n  background-color: #f9f9f9;\n  border-radius: 3px;\n  margin-bottom: 4px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  color: #666;\n  transition: all 0.2s;\n  position: relative;\n  padding-left: 6px; /* 为标记留出空间 */\n}\n\n.resource-item:hover {\n  background-color: #f0f0f0;\n}\n\n/* 资源类型标记 */\n.resource-type-marker {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 4px;\n  height: 100%;\n  border-radius: 2px 0 0 2px;\n}\n\n/* 资源标题 */\n.resource-title {\n  margin-left: 8px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n/* 移除之前的样式 */\n.attachment-item,\n.quiz-item {\n  border-left: none;\n}\n\n/* 课件标签样式 */\n.attachment-item::before {\n  content: \"课件\";\n  display: inline-block;\n  background-color: #22c55e;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n  white-space: nowrap;\n}\n\n/* 考题标签样式 */\n.quiz-item::before {\n  content: \"考试\";\n  display: inline-box;\n  background-color: #eba400;\n  color: #fff;\n  padding: 1px 6px;\n  border-radius: 2px;\n  font-size: 11px;\n  margin-right: 6px;\n  border: 1px solid transparent;\n}\n\n/* 一级章节 */\n.level-1 {\n  font-weight: 500;\n  background-color: #fafafa;\n  border-left: 3px solid #d9d9d9;\n}\n\n.level-1.selected {\n  border-left: 3px solid #1890ff;\n}\n\n/* 二级章节 */\n.level-2 {\n  font-weight: normal;\n  background-color: #ffffff;\n  padding-left: 20px;\n  margin-left: 15px;\n  border-left: 3px solid #f0f0f0;\n}\n\n.level-2.selected {\n  border-left: 3px solid #52c41a;\n}\n\n/* 添加子章节按钮 */\n.add-sub-button {\n  background-color: #3949ab;\n  color: white;\n  border: none;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.add-sub-button:hover {\n  background-color: #5c6bc0;\n}\n\n/* 删除按钮 */\n.delete-button {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.65);\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.delete-button:hover {\n  color: #ff4d4f;\n  border-color: #ff4d4f;\n}\n\n/* 一级章节的资源列表样式调整 */\n.level-1-resources {\n  margin-left: 10px;\n  border-left: 3px solid #d9d9d9;\n  padding-left: 20px;\n}\n\n/* 只读模式下的资源样式 */\n.read-only-resources .resource-item {\n  cursor: default;\n}\n\n.read-only-resources .resource-item:hover {\n  background-color: #f9f9f9; /* 保持原背景色，不改变 */\n}\n\n/* 章节树样式 */\n.chapter-tree {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n/* 章节组样式 */\n.chapter-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5px;\n}\n\n/* 子章节区域样式 */\n.sub-chapters {\n  margin-left: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-top: 5px;\n  border-left: 1px dashed #d9d9d9;\n  margin-left: 10px;\n  padding-left: 20px;\n}\n\n/* 只读模式样式 */\n.chapter-tree.read-only .chapter-item {\n  cursor: default;\n}\n\n.chapter-tree.read-only .chapter-item:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only {\n  cursor: default;\n}\n\n.chapter-item.read-only:hover {\n  background-color: transparent;\n}\n\n.chapter-item.read-only.selected {\n  background-color: transparent;\n  font-weight: normal;\n  color: inherit;\n}\n\n.confirm-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.confirm-dialog {\n  background-color: white;\n  padding: 24px;\n  border-radius: 2px;\n  width: 320px;\n  box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12),\n    0 6px 16px 0 rgba(0, 0, 0, 0.08);\n}\n\n.confirm-dialog-title {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.85);\n  font-weight: 500;\n}\n\n.confirm-dialog-message {\n  margin-bottom: 24px;\n  color: rgba(0, 0, 0, 0.65);\n  font-size: 14px;\n}\n\n.confirm-dialog-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n}\n\n.confirm-dialog-cancel {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 30px;\n  background-color: white;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.65);\n}\n\n.confirm-dialog-cancel:hover {\n  color: #3949ab;\n  border-color: #3949ab;\n}\n\n.confirm-dialog-confirm {\n  padding: 0 15px;\n  height: 32px;\n  line-height: 32px;\n  background-color: #3949ab;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n  font-size: 14px;\n  color: white;\n}\n\n.confirm-dialog-confirm:hover {\n  background-color: #5c6bc0;\n}\n\n/* 禁用的多选框标签样式 */\n.checkbox-label.disabled {\n    color: #999;\n    cursor: not-allowed;\n}\n\n/* 已被使用标记的样式 */\n.resource-used-mark {\n    margin-left: 5px;\n    font-size: 12px;\n    color: #ff6b6b;\n    font-style: italic;\n}\n\n/* 章节树空状态样式 */\n.chapter-tree-empty-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 40px 0;\n    color: #999;\n    text-align: center;\n}\n\n.empty-state-icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n    color: #d9d9d9;\n}\n\n.empty-state-text {\n    font-size: 16px;\n    margin-bottom: 8px;\n    color: #666;\n}\n\n.empty-state-hint {\n    font-size: 14px;\n    color: #999;\n}\n\n/* 资源列表空状态样式 */\n.resource-empty-state {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px 0;\n    color: #999;\n    font-size: 14px;\n    background-color: #fafafa;\n    border-radius: 3px;\n}\n\n/* 必填标识样式 */\n.required {\n  color: #ff4d4f;\n  margin-right: 4px;\n  font-weight: normal;\n}\n\n/* 输入提示样式 */\n.input-hint {\n  margin-top: 4px;\n  color: #888;\n  font-size: 12px;\n}\n\n/* 禁用按钮样式 */\n.save-button:disabled {\n  background-color: #f5f5f5;\n  color: rgba(0, 0, 0, 0.25);\n  border-color: #d9d9d9;\n  text-shadow: none;\n  box-shadow: none;\n  cursor: not-allowed;\n}\n\n/* 搜索容器样式 */\n.search-container {\n  margin-bottom: 8px;\n  position: relative;\n}\n\n/* 搜索输入框样式 */\n.search-input {\n  width: calc(100% - 24px);\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n  font-size: 14px;\n  height: 28px;\n  line-height: 1.5;\n  padding-right: 30px; /* 为清除按钮留出空间 */\n}\n\n.search-input:focus {\n  border-color: #40a9ff;\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n}\n\n/* 搜索清除按钮样式 */\n.search-clear-button {\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: transparent;\n  border: none;\n  color: #999;\n  font-size: 16px;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border-radius: 50%;\n  padding: 0;\n}\n\n.search-clear-button:hover {\n  color: #666;\n  background-color: #f0f0f0;\n}\n\n/* 无匹配结果状态 */\n.empty-state-text {\n  text-align: center;\n  padding: 10px 0;\n  color: #999;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// 定义全局 appsmith 变量，避免 'not defined' 错误\nconst appsmith = window.appsmith;\n\n// 模拟的可选课件数据\nconst AVAILABLE_ATTACHMENTS = [];\n\n// 模拟的可选考题数据\nconst AVAILABLE_QUIZZES = [\n\t{ id: 1, name: \"考题1：Java基础知识测试\" },\n\t{ id: 2, name: \"考题2：面向对象概念理解\" },\n\t{ id: 3, name: \"考题3：Java语法练习\" },\n\t{ id: 4, name: \"考题4：编程实践题\" },\n\t{ id: 5, name: \"考题5：综合应用能力测试\" },\n];\n\nfunction ChapterEditor({ chapter, onUpdateChapter, onCancel, allChapters }) {\n\t// 本地状态，存储编辑中的章节信息\n\tconst [editedChapter, setEditedChapter] = useState({ ...chapter });\n\t// 添加状态跟踪标题是否有效\n\tconst [isTitleValid, setIsTitleValid] = useState(!!chapter.name.trim());\n\t// 添加状态跟踪输入中的中文\n\tconst [isComposing, setIsComposing] = useState(false);\n\t// 添加关联课件搜索状态\n\tconst [attachmentSearch, setAttachmentSearch] = useState('');\n\t// 添加关联考题搜索状态\n\tconst [quizSearch, setQuizSearch] = useState('');\n\n\t// 当选中的章节变化时，更新本地状态\n\tuseEffect(() => {\n\t\tsetEditedChapter({ ...chapter });\n\t\tsetIsTitleValid(!!chapter.name.trim());\n\t\t// 重置搜索框\n\t\tsetAttachmentSearch('');\n\t\tsetQuizSearch('');\n\t}, [chapter]);\n\n\t// 检查资源是否已被其他章节使用\n\tconst isResourceUsed = (resourceId, resourceType) => {\n\t\t// 排除当前编辑的章节\n\t\treturn allChapters.some(ch =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tch.id !== chapter.id &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tch[resourceType] &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tch[resourceType].includes(resourceId)\n\t\t\t\t\t\t\t\t\t\t\t\t\t );\n\t};\n\n\t// 处理标题变化\n\tconst handleTitleChange = (e) => {\n\t\t// 获取输入值\n\t\tlet value = e.target.value;\n\n\t\t// 判断是否符合中文、大小写字母、数字\n\t\tvalue = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n\t\t// 限制长度为15个字符\n\t\tif (value.length > 15) {\n\t\t\tvalue = value.substring(0, 15);\n\t\t}\n\n\t\tsetEditedChapter({\n\t\t\t...editedChapter,\n\t\t\tname: value\n\t\t});\n\n\t\t// 检查标题是否有效（非空）\n\t\tsetIsTitleValid(!!value.trim());\n\t};\n\n\t// 处理中文输入开始\n\tconst handleCompositionStart = () => {\n\t\tsetIsComposing(true);\n\t};\n\n\t// 处理中文输入结束\n\tconst handleCompositionEnd = (e) => {\n\t\tsetIsComposing(false);\n\n\t\t// 中文输入完成后，再次检查字符限制\n\t\tlet value = e.target.value;\n\t\tvalue = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n\t\tif (value.length > 15) {\n\t\t\tvalue = value.substring(0, 15);\n\n\t\t\t// 直接更新输入框的值\n\t\t\te.target.value = value;\n\n\t\t\t// 更新章节名称\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tname: value\n\t\t\t});\n\t\t}\n\t};\n\n\t// 处理输入前事件，用于在输入前检查是否会超出限制\n\tconst handleBeforeInput = (e) => {\n\t\tif (editedChapter.name.length >= 15) {\n\t\t\t// 如果已经达到15个字符，阻止进一步输入\n\t\t\te.preventDefault();\n\t\t}\n\t};\n\n\t// 处理粘贴事件\n\tconst handlePaste = (e) => {\n\t\t// 获取粘贴的文本\n\t\tconst pasteText = e.clipboardData.getData('text');\n\n\t\t// 过滤不符合规则的字符\n\t\tconst filteredText = pasteText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n\t\t// 当前文本长度\n\t\tconst currentLength = editedChapter.name.length;\n\n\t\tif (currentLength >= 15) {\n\t\t\t// 如果已经达到15个字符，阻止粘贴\n\t\t\te.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\t// 可以粘贴的最大长度\n\t\tconst maxPasteLength = 15 - currentLength;\n\n\t\t// 截取符合长度限制的部分\n\t\tconst truncatedText = filteredText.substring(0, maxPasteLength);\n\n\t\tif (truncatedText) {\n\t\t\t// 阻止默认粘贴行为\n\t\t\te.preventDefault();\n\n\t\t\t// 手动更新输入值\n\t\t\tconst newValue = editedChapter.name + truncatedText;\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tname: newValue\n\t\t\t});\n\t\t\tsetIsTitleValid(!!newValue.trim());\n\t\t}\n\t};\n\n\t// 处理课件选择变化\n\tconst handleAttachmentChange = (attachmentId) => {\n\t\tconst currentAttachments = [...editedChapter.attachments];\n\n\t\t// 如果已经选中，则取消选择；否则添加\n\t\tif (currentAttachments.includes(attachmentId)) {\n\t\t\tconst newAttachments = currentAttachments.filter(id => id !== attachmentId);\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tattachments: newAttachments\n\t\t\t});\n\t\t} else {\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tattachments: [...currentAttachments, attachmentId]\n\t\t\t});\n\t\t}\n\t};\n\n\t// 处理考题选择变化\n\tconst handleQuizChange = (quizId) => {\n\t\tconst currentQuizzes = [...editedChapter.quizzes];\n\n\t\t// 如果已经选中，则取消选择；否则添加\n\t\tif (currentQuizzes.includes(quizId)) {\n\t\t\tconst newQuizzes = currentQuizzes.filter(id => id !== quizId);\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tquizzes: newQuizzes\n\t\t\t});\n\t\t} else {\n\t\t\tsetEditedChapter({\n\t\t\t\t...editedChapter,\n\t\t\t\tquizzes: [...currentQuizzes, quizId]\n\t\t\t});\n\t\t}\n\t};\n\n\t// 处理课件搜索输入\n\tconst handleAttachmentSearch = (e) => {\n\t\t// 获取输入值\n\t\tlet value = e.target.value;\n\n\t\t// 只允许中文、大小写字母、数字\n\t\tvalue = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n\t\tsetAttachmentSearch(value);\n\t};\n\n\t// 清除课件搜索内容\n\tconst clearAttachmentSearch = () => {\n\t\tsetAttachmentSearch('');\n\t};\n\n\t// 处理考题搜索输入\n\tconst handleQuizSearch = (e) => {\n\t\t// 获取输入值\n\t\tlet value = e.target.value;\n\n\t\t// 只允许中文、大小写字母、数字\n\t\tvalue = value.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '');\n\n\t\tsetQuizSearch(value);\n\t};\n\n\t// 清除考题搜索内容\n\tconst clearQuizSearch = () => {\n\t\tsetQuizSearch('');\n\t};\n\n\t// 过滤课件列表\n\tconst filteredAttachments = (appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS).filter(\n\t\tattachment => attachment.name.toLowerCase().includes(attachmentSearch.toLowerCase())\n\t);\n\n\t// 过滤考题列表\n\tconst filteredQuizzes = AVAILABLE_QUIZZES.filter(\n\t\tquiz => quiz.name.toLowerCase().includes(quizSearch.toLowerCase())\n\t);\n\n\t// 处理保存\n\tconst handleSave = () => {\n\t\t// 标题验证\n\t\tif (editedChapter.name.trim() === '') {\n\t\t\talert('章节标题不能为空');\n\t\t\treturn;\n\t\t}\n\n\t\t// 验证所选资源是否有冲突\n\t\tconst attachmentConflicts = [];\n\t\tconst quizConflicts = [];\n\n\t\teditedChapter.attachments.forEach(attachmentId => {\n\t\t\tif (isResourceUsed(attachmentId, 'attachments')) {\n\t\t\t\tconst courseWare = appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS\n\t\t\t\tconst attachment = courseWare.find(a => a.id === attachmentId);\n\t\t\t\tattachmentConflicts.push(attachment ? attachment.name : `课件ID: ${attachmentId}`);\n\t\t\t}\n\t\t});\n\n\t\teditedChapter.quizzes.forEach(quizId => {\n\t\t\tif (isResourceUsed(quizId, 'quizzes')) {\n\t\t\t\tconst quiz = AVAILABLE_QUIZZES.find(q => q.id === quizId);\n\t\t\t\tquizConflicts.push(quiz ? quiz.name : `考题ID: ${quizId}`);\n\t\t\t}\n\t\t});\n\n\t\t// 如果有冲突，显示错误信息并阻止保存\n\t\tif (attachmentConflicts.length > 0 || quizConflicts.length > 0) {\n\t\t\tlet errorMessage = '以下资源已被其他章节使用，不能重复选择:\\n\\n';\n\n\t\t\tif (attachmentConflicts.length > 0) {\n\t\t\t\terrorMessage += '课件:\\n- ' + attachmentConflicts.join('\\n- ') + '\\n\\n';\n\t\t\t}\n\n\t\t\tif (quizConflicts.length > 0) {\n\t\t\t\terrorMessage += '考题:\\n- ' + quizConflicts.join('\\n- ');\n\t\t\t}\n\n\t\t\talert(errorMessage);\n\t\t\treturn;\n\t\t}\n\n\t\t// 无冲突，可以保存\n\t\tonUpdateChapter(editedChapter);\n\t};\n\n\treturn (\n\t\t<div className=\"chapter-editor\">\n\t\t<div className=\"editor-header\">\n\t\t<h2>编辑章节</h2>\n\t\t</div>\n\n\t\t<div className=\"editor-form\">\n\t\t<div className=\"form-content\">\n\t\t<div className=\"form-group\">\n\t\t<label>章节标题 <span className=\"required\">*</span></label>\n\t\t<input\n\t\ttype=\"text\"\n\t\tvalue={editedChapter.name}\nonChange={handleTitleChange}\nonPaste={handlePaste}\nonCompositionStart={handleCompositionStart}\nonCompositionEnd={handleCompositionEnd}\nonBeforeInput={handleBeforeInput}\nplaceholder=\"输入章节标题\"\nclassName=\"form-control\"\nmaxLength={15}  // 设置最大长度\n/>\n\t<div className=\"input-hint\">\n\t\t<small>允许中文、字母、数字，最多15个字符 ({editedChapter.name.length}/15)</small>\n</div>\n</div>\n\n<div className=\"form-group\">\n\t<label>关联课件</label>\n<div className=\"search-container\">\n\t<input\ntype=\"text\"\nclassName=\"search-input\"\nplaceholder=\"搜索课件\"\nvalue={attachmentSearch}\nonChange={handleAttachmentSearch}\n/>\n\t{attachmentSearch && (\n\t <button \n\t className=\"search-clear-button\" \n\t onClick={clearAttachmentSearch}\ntitle=\"清除搜索\"\n>\n\t×\n</button>\n)}\n\t</div>\n<div className=\"checkbox-list\">\n\t{filteredAttachments.length > 0 ? (\n\t filteredAttachments.map(attachment => {\n\t // 检查是否已被其他章节使用\n\t const isUsedByOthers = isResourceUsed(attachment.id, 'attachments');\n// 是否在当前章节中选中\nconst isChecked = editedChapter.attachments.includes(attachment.id);\n\nreturn (\n\t<div key={attachment.id} className=\"checkbox-item\">\n\t<label className={`checkbox-label ${isUsedByOthers && !isChecked ? 'disabled' : ''}`}>\n                                                <input\n                                                    type=\"checkbox\"\n                                                    checked={isChecked}\n                                                    onChange={() => handleAttachmentChange(attachment.id)}\n                                                    disabled={isUsedByOthers && !isChecked}\n                                                />\n                                                <span>{attachment.name}</span>\n                                                {isUsedByOthers && !isChecked &&\n                                                    <span className=\"resource-used-mark\">(已被使用)</span>\n                                                }\n                                            </label>\n                                        </div>\n                                    );\n                                })\n                            ) : (\n                                <div className=\"resource-empty-state\">\n                                    <div className=\"empty-state-text\">无匹配课件</div>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>关联考题</label>\n                        <div className=\"search-container\">\n                            <input\n                                type=\"text\"\n                                className=\"search-input\"\n                                placeholder=\"搜索考题\"\n                                value={quizSearch}\n                                onChange={handleQuizSearch}\n                            />\n                            {quizSearch && (\n                                <button \n                                    className=\"search-clear-button\" \n                                    onClick={clearQuizSearch}\n                                    title=\"清除搜索\"\n                                >\n                                    ×\n                                </button>\n                            )}\n                        </div>\n                        <div className=\"checkbox-list\">\n                            {filteredQuizzes.length > 0 ? (\n                                filteredQuizzes.map(quiz => {\n                                    // 检查是否已被其他章节使用\n                                    const isUsedByOthers = isResourceUsed(quiz.id, 'quizzes');\n                                    // 是否在当前章节中选中\n                                    const isChecked = editedChapter.quizzes.includes(quiz.id);\n\n                                    return (\n                                        <div key={quiz.id} className=\"checkbox-item\">\n                                            <label className={`checkbox-label ${isUsedByOthers && !isChecked ? 'disabled' : ''}`}>\n                                                <input\n                                                    type=\"checkbox\"\n                                                    checked={isChecked}\n                                                    onChange={() => handleQuizChange(quiz.id)}\n                                                    disabled={isUsedByOthers && !isChecked}\n                                                />\n                                                <span>{quiz.name}</span>\n                                                {isUsedByOthers && !isChecked &&\n                                                    <span className=\"resource-used-mark\">(已被使用)</span>\n                                                }\n                                            </label>\n                                        </div>\n                                    );\n                                })\n                            ) : (\n                                <div className=\"resource-empty-state\">\n                                    <div className=\"empty-state-text\">无匹配考题</div>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"form-actions\">\n                    <button\n                        className=\"cancel-button\"\n                        onClick={onCancel}\n                    >\n                        取消\n                    </button>\n                    <button\n                        className=\"save-button\"\n                        onClick={handleSave}\n                        disabled={!isTitleValid}  // 根据标题有效性禁用按钮\n                        style={!isTitleValid ? {opacity: 0.5, cursor: 'not-allowed'} : {}}\n                    >\n                        保存\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction ConfirmDialog({ isOpen, name, message, onConfirm, onCancel }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"confirm-dialog-overlay\">\n            <div className=\"confirm-dialog\">\n                <h3 className=\"confirm-dialog-title\">{name}</h3>\n                <p className=\"confirm-dialog-message\">{message}</p>\n                <div className=\"confirm-dialog-actions\">\n                    <button className=\"confirm-dialog-cancel\" onClick={onCancel}>取消</button>\n                    <button className=\"confirm-dialog-confirm\" onClick={onConfirm}>确定</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// 章节项组件\nfunction ChapterItem({\n    chapter,\n    selected,\n    onSelect,\n    onAddSubChapter,\n    onDelete,\n    level,\n    readOnly = false // 添加只读模式参数，默认为false\n}) {\n    // 添加状态控制确认对话框显示\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n    // 处理章节选择\n    const handleSelect = () => {\n        if (!readOnly) {\n            onSelect(chapter.id);\n        }\n    };\n\n    // 处理添加子章节\n    const handleAddSubChapter = (e) => {\n        e.stopPropagation(); // 阻止事件冒泡，避免触发章节选择\n        onAddSubChapter(chapter.id);\n    };\n\n    // 处理删除按钮点击\n    const handleDeleteClick = (e) => {\n        e.stopPropagation(); // 阻止事件冒泡\n        setShowDeleteConfirm(true); // 显示确认对话框\n    };\n\n    // 确认删除\n    const confirmDelete = () => {\n        setShowDeleteConfirm(false);\n        onDelete(chapter.id);\n    };\n\n    // 取消删除\n    const cancelDelete = () => {\n        setShowDeleteConfirm(false);\n    };\n\n    // 格式化章节标题\n    const formatTitle = () => {\n        // 对于一级章节，格式为\"第X章\"\n        if (level === 1) {\n            return `第${chapter.sort}章 ${chapter.name}`;\n        }\n\n        // 对于二级章节，格式为\"X.Y\"\n        return `${chapter.id} ${chapter.name}`;\n    };\n\n    // 辅助函数：根据ID查找对应的课件名称\n    const getAttachmentName = (id) => {\n        const courseWare = appsmith?.model?.courseWare || AVAILABLE_ATTACHMENTS\n        const attachment = courseWare.find(a => a.id === id);\n        return attachment ? attachment.name : `未知课件(${id})`;\n    };\n\n    // 辅助函数：根据ID查找对应的考题名称\n    const getQuizName = (id) => {\n        const quiz = AVAILABLE_QUIZZES.find(q => q.id === id);\n        return quiz ? quiz.name : `未知考题(${id})`;\n    };\n\n    // 检查是否有关联的课件或考题\n    const hasAttachments = chapter.attachments && chapter.attachments.length > 0;\n    const hasQuizzes = chapter.quizzes && chapter.quizzes.length > 0;\n\n    return (\n        <div>\n            <div\n                className={`chapter-item ${selected ? 'selected' : ''} level-${level} ${readOnly ? 'read-only' : ''}`}\n                onClick={handleSelect}\n            >\n                <div className=\"chapter-content\">\n                    <div className=\"chapter-name\">\n                        {/* 使用预先计算好的显示标题 */}\n                        {chapter.displayTitle || formatTitle()}\n                    </div>\n                    {!readOnly && (\n                        <div className=\"chapter-actions\">\n                            {/* 只有一级章节才显示添加子章节按钮 */}\n                            {level === 1 && (\n                                <button\n                                    className=\"add-sub-button\"\n                                    onClick={handleAddSubChapter}\n                                    title=\"添加二级目录\"\n                                >\n                                    +\n                                </button>\n                            )}\n                            <button\n                                className=\"delete-button\"\n                                onClick={handleDeleteClick}\n                                title=\"删除章节\"\n                            >\n                                ×\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {/* 显示关联的课件或考题 */}\n            {(hasAttachments || hasQuizzes) && (\n                <div className={`chapter-resources ${level === 1 ? 'level-1-resources' : ''} ${readOnly ? 'read-only-resources' : ''}`}>\n                    {/* 显示关联的课件 */}\n                    {hasAttachments && (\n                        <div className=\"resource-list\">\n                            {chapter.attachments.map((attachmentId, index) => (\n                                <div key={`att-${index}`} className=\"resource-item attachment-item\">\n                                    <span className=\"resource-type-marker file-marker\"></span>\n                                    <span className=\"resource-title\">{getAttachmentName(attachmentId)}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                    {/* 显示关联的考题 */}\n                    {hasQuizzes && (\n                        <div className=\"resource-list\">\n                            {chapter.quizzes.map((quizId, index) => (\n                                <div key={`quiz-${index}`} className=\"resource-item quiz-item\">\n                                    <span className=\"resource-type-marker quiz-marker\"></span>\n                                    <span className=\"resource-title\">{getQuizName(quizId)}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* 删除确认对话框 */}\n            <ConfirmDialog\n                isOpen={showDeleteConfirm}\n                title=\"删除确认\"\n                message={`确定要删除\"${chapter.name}\"章节吗？`}\n                onConfirm={confirmDelete}\n                onCancel={cancelDelete}\n            />\n        </div>\n    );\n}\n\n// 章节树组件\nfunction ChapterTree({\n    chapters,\n    selectedChapterId,\n    onSelectChapter,\n    onAddSubChapter,\n    onDeleteChapter,\n    readOnly = false // 添加只读模式参数，默认为false\n}) {\n    // 获取顶级章节\n    const rootChapters = chapters.filter(chapter => !chapter.parentId);\n\n    // 排序顶级章节\n    const sortedRootChapters = [...rootChapters].sort((a, b) => a.sort - b.sort);\n\n    // 获取子章节\n    const getChildChapters = (parentId) => {\n        return chapters\n            .filter(chapter => chapter.parentId === parentId)\n            .sort((a, b) => {\n                const aOrder = parseInt(a.id.split('.')[1]);\n                const bOrder = parseInt(b.id.split('.')[1]);\n                return aOrder - bOrder;\n            });\n    };\n\n    // 如果没有一级章节，显示空状态\n    if (sortedRootChapters.length === 0) {\n        return (\n            <div className=\"chapter-tree-empty-state\">\n                <div className=\"empty-state-icon\">📚</div>\n                <div className=\"empty-state-text\">暂无章节数据</div>\n                {!readOnly && <div className=\"empty-state-hint\">点击\"添加一级目录\"按钮创建章节</div>}\n            </div>\n        );\n    }\n\n    // 自定义章节标题格式化函数\n    const formatChapterTitle = (chapter, index, parentIndex = null) => {\n        if (!parentIndex) {\n            // 一级章节：第X章 名称\n            return `第${index}章 ${chapter.name}`;\n        } else {\n            // 二级章节：X.Y 名称\n            return `${parentIndex}.${index} ${chapter.name}`;\n        }\n    };\n\n    return (\n        <div className={`chapter-tree ${readOnly ? 'read-only' : ''}`}>\n            {sortedRootChapters.map((rootChapter, rootIndex) => {\n                const parentIndex = rootIndex + 1; // 从1开始的父章节索引\n\n                return (\n                    <div key={rootChapter.id} className=\"chapter-root\">\n                        <ChapterItem\n                            chapter={{\n                                ...rootChapter,\n                                displayTitle: formatChapterTitle(rootChapter, parentIndex)\n                            }}\n                            selected={selectedChapterId === rootChapter.id}\n                            onSelect={readOnly ? () => { } : onSelectChapter}\n                            onAddSubChapter={onAddSubChapter}\n                            onDelete={onDeleteChapter}\n                            level={1}\n                            readOnly={readOnly}\n                        />\n\n                        <div className=\"chapter-children\">\n                            {getChildChapters(rootChapter.id).map((childChapter, childIndex) => (\n                                <ChapterItem\n                                    key={childChapter.id}\n                                    chapter={{\n                                        ...childChapter,\n                                        displayTitle: formatChapterTitle(childChapter, childIndex + 1, parentIndex)\n                                    }}\n                                    selected={selectedChapterId === childChapter.id}\n                                    onSelect={readOnly ? () => { } : onSelectChapter}\n                                    onAddSubChapter={onAddSubChapter}\n                                    onDelete={onDeleteChapter}\n                                    level={2}\n                                    readOnly={readOnly}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nfunction ChapterTreePage() {\n    // 章节数据状态\n    const [chapters, setChapters] = useState(appsmith?.model?.chapters ?? []);\n    // 当前选中的章节ID\n    const [selectedChapterId, setSelectedChapterId] = useState(null);\n    // 是否显示编辑器\n    const [showEditor, setShowEditor] = useState(false);\n    // 是否为编辑模式\n    const [isEditMode, setIsEditMode] = useState(true);\n\n    // 获取当前选中的章节对象\n    const selectedChapter = chapters.find(chapter => chapter.id === selectedChapterId);\n\n    // 添加新章节\n    const addChapter = (parentId = null) => {\n        // 如果是添加一级章节\n        if (parentId === null) {\n            // 获取当前最大的一级章节数量\n            const rootChapters = chapters.filter(c => c.parentId === null);\n            const newOrder = rootChapters.length + 1;\n            const newChapter = {\n                id: newOrder.toString(),\n                name: '新章节名称',\n                sort: newOrder,\n                parentId: null,\n                attachments: [], // 确保初始化为空数组\n                quizzes: []      // 确保初始化为空数组\n            };\n            setChapters([...chapters, newChapter]);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: [...chapters, newChapter] })\n            setSelectedChapterId(newChapter.id);\n            // 显示编辑器\n            setShowEditor(true);\n        } else {\n            // 如果是添加二级章节（子章节）\n            // 获取父章节\n            const parentChapter = chapters.find(c => c.id === parentId);\n            if (!parentChapter) return;\n\n            // 获取该父章节下的所有子章节\n            const childChapters = chapters.filter(c => c.parentId === parentId);\n            // 计算新子章节的顺序\n            const newChildOrder = childChapters.length + 1;\n            // 创建新子章节\n            const newChildChapter = {\n                id: `${parentId}.${newChildOrder}`,\n                name: '新小节名称',\n                sort: newChildOrder,\n                parentId: parentId,\n                attachments: [], // 确保初始化为空数组\n                quizzes: []      // 确保初始化为空数组\n            };\n\n            setChapters([...chapters, newChildChapter]);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: [...chapters, newChildChapter] })\n            setSelectedChapterId(newChildChapter.id);\n            // 显示编辑器\n            setShowEditor(true);\n        }\n    };\n\n    // 更新章节内容\n    const updateChapter = (updatedChapter) => {\n        const updatedChapters = chapters.map(chapter =>\n            chapter.id === updatedChapter.id ? updatedChapter : chapter\n        );\n        console.log(updatedChapters, \"updatedChapters\");\n\n        setChapters(updatedChapters);\n        appsmith.updateModel({\n            chapters: updatedChapters\n        })\n        appsmith.triggerEvent(\"handleSaveChapter\", { chapters: updatedChapters })\n        // 默认不选中任何章节，不显示编辑器\n        setSelectedChapterId(null);\n        setShowEditor(false);\n    };\n\n    // 删除章节\n    const deleteChapter = (chapterId) => {\n        // 找到要删除的章节\n        const chapterToDelete = chapters.find(c => c.id === chapterId);\n        if (!chapterToDelete) return;\n\n        // 如果是一级章节，同时删除其所有子章节\n        if (chapterToDelete.parentId === null) {\n            const updatedChapters = chapters.filter(\n                c => c.id !== chapterId && c.parentId !== chapterId\n            );\n\n            // 重新排序剩余的一级章节\n            const rootChapters = updatedChapters\n                .filter(c => c.parentId === null)\n                .sort((a, b) => a.sort - b.sort);\n\n            // 更新一级章节的ID和顺序\n            rootChapters.forEach((chapter, index) => {\n                const newOrder = index + 1;\n                const oldId = chapter.id;\n                chapter.id = newOrder.toString();\n                chapter.sort = newOrder;\n\n                // 同时更新该章节下所有子章节的ID\n                updatedChapters\n                    .filter(c => c.parentId === oldId)\n                    .forEach(childChapter => {\n                        childChapter.parentId = chapter.id;\n                        childChapter.id = `${chapter.id}.${childChapter.sort}`;\n                    });\n            });\n\n            setChapters(updatedChapters);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: updatedChapters })\n\n            // 如果删除的是当前选中的章节，取消选中并隐藏编辑器\n            if (selectedChapterId === chapterId) {\n                setSelectedChapterId(null);\n                setShowEditor(false);\n            }\n        } else {\n            // 如果是二级章节，只删除该章节\n            const parentId = chapterToDelete.parentId;\n            const updatedChapters = chapters.filter(c => c.id !== chapterId);\n\n            // 重新排序同一父章节下的所有子章节\n            const siblingChapters = updatedChapters\n                .filter(c => c.parentId === parentId)\n                .sort((a, b) => a.sort - b.sort);\n\n            // 更新子章节的ID和顺序\n            siblingChapters.forEach((chapter, index) => {\n                const newOrder = index + 1;\n                chapter.id = `${parentId}.${newOrder}`;\n                chapter.sort = newOrder;\n            });\n\n            setChapters(updatedChapters);\n            appsmith.triggerEvent(\"handleSaveChapter\", { chapters: updatedChapters })\n            // 如果删除的是当前选中的章节，选择父章节\n            if (selectedChapterId === chapterId) {\n                setSelectedChapterId(parentId);\n            }\n        }\n    };\n\n    // 选中章节\n    const selectChapter = (chapterId) => {\n        setSelectedChapterId(chapterId);\n        setShowEditor(true); // 选中章节时显示编辑器\n    };\n\n    // 取消编辑\n    const handleCancelEdit = () => {\n        setShowEditor(false);\n        setSelectedChapterId(null);\n    };\n\n    // 切换编辑/展示模式\n    const toggleEditMode = () => {\n        if (!isEditMode) {\n            // 从展示模式切换到编辑模式\n            setIsEditMode(true);\n        } else {\n            // 从编辑模式切换到展示模式\n            setIsEditMode(false);\n            setShowEditor(false);\n            setSelectedChapterId(null);\n        }\n    };\n\n    return (\n        <div className=\"chapter-tree-page\">\n            <div className=\"app-main\">\n                <div className={`chapter-panel ${!showEditor ? 'full-width' : ''}`}>\n                    <div className=\"panel-header\">\n                        <div className=\"panel-actions\">\n                            {isEditMode && !showEditor && (\n                                <button\n                                    className=\"add-root-button\"\n                                    onClick={() => addChapter(null)}\n                                >\n                                    添加一级目录\n                                </button>\n                            )}\n\n                        </div>\n                    </div>\n                    <div className=\"chapter-tree-container\">\n                        <ChapterTree\n                            chapters={chapters}\n                            selectedChapterId={selectedChapterId}\n                            onSelectChapter={selectChapter}\n                            onAddSubChapter={addChapter}\n                            onDeleteChapter={deleteChapter}\n                            readOnly={!isEditMode} // 根据模式设置是否只读\n                        />\n                    </div>\n                </div>\n\n                {showEditor && (\n                    <div className=\"editor-panel\">\n                        {selectedChapter ? (\n                            <ChapterEditor\n                                chapter={selectedChapter}\n                                onUpdateChapter={updateChapter}\n                                onCancel={handleCancelEdit}\n                                allChapters={chapters} // 传递所有章节信息用于检查\n                            />\n                        ) : (\n                            <div className=\"empty-editor\">\n                                <p>请选择要编辑的章节</p>\n                                <button className=\"cancel-button\" onClick={handleCancelEdit}>取消</button>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\n\nappsmith.onReady(() => {\n    /*\n         * This handler function will get called when parent application is ready.\n         * Initialize your component here\n         * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n         */\n    ReactDOM.render(<ChapterTreePage />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "qs8n0bd5ks",
  "widgetName": "CustomEdit"
}