{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 51,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{\n  \"tips\": [\n    \"Pass data to this widget in the default model field\",\n    \"Access data in the javascript file using the appsmith.model variable\",\n    \"Create events in the widget and trigger them in the javascript file using appsmith.triggerEvent('eventName')\",\n    \"Access data in CSS as var(--appsmith-model-{property-name})\"\n  ]\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "hnotz2o69b",
  "leftColumn": 24,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 51,
  "mobileLeftColumn": 24,
  "mobileRightColumn": 47,
  "mobileTopRow": 21,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 20.25,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 48,
  "srcDoc": {
    "css": "",
    "html": "<div id=\"simple-auth-interceptor\" style=\"padding: 10px; border: 1px solid #eee; border-radius: 4px;\">\n  <div id=\"init-status\" style=\"margin-bottom: 10px; color: blue;\">准备初始化...</div>\n  <button id=\"init-button\" style=\"padding: 5px 10px; margin-right: 10px;\">初始化拦截器</button>\n  <button id=\"test-button\" style=\"padding: 5px 10px; display: none;\">测试请求</button>\n</div>\n\n<script>\n(function() {\n  // 获取DOM元素\n  const statusEl = document.getElementById('init-status');\n  const initButton = document.getElementById('init-button');\n  const testButton = document.getElementById('test-button');\n  \n  // 您的认证token\n  const AUTH_TOKEN =\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGOHJzQXNKcTVqc2JNd0M2RzgydGpMaDRBMDBPR3Vtem43dUZJOV96SXI4In0.eyJleHAiOjE3NDUzNDcwNDgsImlhdCI6MTc0NTMxMTA0OCwianRpIjoiZjQ3YzIwMGYtNjkwYy00M2QyLWI1MjUtYjRhZmZhYjE2MDgyIiwiaXNzIjoiaHR0cHM6Ly9wYWFzLWF1dGguaG9sZGVyem9uZS5jbi9yZWFsbXMvcGFhcyIsInN1YiI6ImY6ZjAzNGUyMTktZjdiMi00ZTQzLTlmM2YtZTAyZDk0MDczZTc0OjE3OCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImhvbGRlci1wYyIsInNlc3Npb25fc3RhdGUiOiIxZmZjMjIzNC00ZTY1LTRmYmYtOTVhOC0yMDZkODBlNTI0MmEiLCJhY3IiOiJxcmNvZGUiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJzZXJ2aWNlX3ZlcnNpb24iOiJ2MSIsInNpZCI6IjFmZmMyMjM0LTRlNjUtNGZiZi05NWE4LTIwNmQ4MGU1MjQyYSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6Iua1iy3lkLTpopYiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiIxMzQzODE1NzQ4OSIsImdpdmVuX25hbWUiOiLmtYst5ZC06aKWIn0.hKODFXwlL8sMu-a-HuSqAEqGeG6GZhvfLOMaY-FwkDEMrMc5sN9zMPmHst_cNnPMTNJzSsi7GqsS-i5oDvVBOCq7mA3iR82ynIEvvOP7A92Cw7yh01Nr5J6awu87i_N1KWk0dWHdXkZw5eFFPZHSgJXnnIlavA6RiuPgFyKZHa2beSGJmupWDxOL4q_ePD00gp0rBa_JKxqEYKC97hM9IzOIMrO5tyeaJt01859thAAY-kvlmRpAXBYdcyll5G8c_9aKOxpF-AIxYe3pRzxmp4Yck-cE62Y4Dd8Q_ml_FkyAaPZzm9r63hTQRuCHt86nD7DSMuaPvfZaRd_GQxI4Sg\"; // 替换为您的实际token\n  \n  // 更新状态显示\n  function updateStatus(message, color) {\n    if (statusEl) {\n      statusEl.textContent = message;\n      statusEl.style.color = color || 'black';\n    }\n    console.log(message);\n  }\n  \n  // 主线程fetch拦截\n  function setupMainFetch() {\n    try {\n      // 保存原始fetch\n      const originalFetch = window.fetch;\n      \n      // 覆盖fetch\n      window.fetch = function(resource, options = {}) {\n        // 初始化headers\n        options = options || {};\n        options.headers = options.headers || {};\n        \n        // 添加Authorization头\n        options.headers = {\n          ...options.headers,\n          'Authorization': 'Bearer ' + AUTH_TOKEN\n        };\n        \n        // 调用原始fetch\n        return originalFetch.call(this, resource, options);\n      };\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n  \n  // XMLHttpRequest拦截\n  function setupXHR() {\n    try {\n      // 保存原始方法\n      const originalOpen = XMLHttpRequest.prototype.open;\n      const originalSend = XMLHttpRequest.prototype.send;\n      \n      // 覆盖open\n      XMLHttpRequest.prototype.open = function() {\n        this._url = arguments[1];\n        return originalOpen.apply(this, arguments);\n      };\n      \n      // 覆盖send\n      XMLHttpRequest.prototype.send = function() {\n        try {\n          this.setRequestHeader('Authorization', 'Bearer ' + AUTH_TOKEN);\n        } catch (e) {\n          console.warn('XHR已发送或请求头已锁定，无法添加Authorization:', e);\n        }\n        return originalSend.apply(this, arguments);\n      };\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n  \n  // 初始化EvalWorker拦截器\n  function setupEvalWorkerFetch() {\n    try {\n      // 存储token到store\n      storeValue(\"authToken\", AUTH_TOKEN, false);\n      \n      // 设置evalworker拦截器\n      return evalJs(`\n        try {\n          // 保存原始fetch\n          const originalFetch = self.fetch;\n          \n          // 覆盖fetch\n          self.fetch = function(resource, options = {}) {\n            // 初始化options\n            options = options || {};\n            options.headers = options.headers || {};\n            \n            // 获取token\n            const token = appsmith.store.authToken || \"${AUTH_TOKEN}\";\n            \n            // 添加Authorization头\n            options.headers = {\n              ...options.headers,\n              'Authorization': 'Bearer ' + token\n            };\n            \n            console.log('EvalWorker: 已为请求添加认证头');\n            \n            // 调用原始fetch\n            return originalFetch.call(this, resource, options);\n          };\n          \n          return { success: true, message: \"EvalWorker拦截器安装成功\" };\n        } catch (error) {\n          return { success: false, error: String(error) };\n        }\n      `);\n    } catch (error) {\n      return Promise.resolve({ success: false, error: error.message });\n    }\n  }\n  \n  // 初始化所有拦截器\n  async function initInterceptors() {\n    updateStatus('正在初始化拦截器...', 'blue');\n    \n    try {\n      // 初始化主线程fetch\n      const mainResult = setupMainFetch();\n      updateStatus('主线程Fetch拦截器: ' + (mainResult.success ? '成功' : '失败: ' + mainResult.error), \n                  mainResult.success ? 'green' : 'red');\n      \n      // 初始化XHR\n      const xhrResult = setupXHR();\n      updateStatus('XHR拦截器: ' + (xhrResult.success ? '成功' : '失败: ' + xhrResult.error), \n                  xhrResult.success ? 'green' : 'red');\n      \n      // 初始化evalworker\n      try {\n        updateStatus('正在设置EvalWorker拦截器...', 'blue');\n        const evalResult = await setupEvalWorkerFetch();\n        \n        let success = false;\n        let message = \"\";\n        \n        if (typeof evalResult === 'string') {\n          try {\n            const parsed = JSON.parse(evalResult);\n            success = parsed.success;\n            message = parsed.message || parsed.error || \"\";\n          } catch (e) {\n            success = true;\n            message = evalResult;\n          }\n        } else {\n          success = evalResult && evalResult.success;\n          message = evalResult ? (evalResult.message || evalResult.error || \"\") : \"未知结果\";\n        }\n        \n        updateStatus('EvalWorker拦截器: ' + (success ? '成功' : '失败: ' + message), \n                    success ? 'green' : 'red');\n      } catch (evalError) {\n        updateStatus('EvalWorker拦截器初始化出错: ' + evalError.message, 'red');\n      }\n      \n      // 全部完成\n      updateStatus('✅ 拦截器初始化完成!', 'green');\n      \n      // 显示测试按钮\n      if (testButton) {\n        testButton.style.display = 'inline-block';\n      }\n    } catch (error) {\n      updateStatus('❌ 初始化过程中出错: ' + error.message, 'red');\n    }\n  }\n  \n  // 测试请求\n  function testRequest() {\n    updateStatus('正在测试请求...', 'blue');\n    \n    fetch('https://goalgo-paas-juanw-re.holderzone.cn/')\n      .then(response => {\n        if (!response.ok) throw new Error('请求失败: ' + response.status);\n        return response.json();\n      })\n      .then(data => {\n        updateStatus('✅ 请求测试成功!', 'green');\n        console.log('测试结果:', data);\n      })\n      .catch(error => {\n        updateStatus('❌ 请求测试失败: ' + error.message, 'red');\n        console.error('测试错误:', error);\n      });\n  }\n  \n  // 设置按钮事件\n  if (initButton) {\n    initButton.onclick = initInterceptors;\n  }\n  \n  if (testButton) {\n    testButton.onclick = testRequest;\n  }\n  \n  // 自动执行初始化(可选)\n  // setTimeout(initInterceptors, 1000);\n})();\n</script>",
    "js": ""
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 21,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "",
    "html": "<div id=\"simple-auth-interceptor\" style=\"padding: 10px; border: 1px solid #eee; border-radius: 4px;\">\n  <div id=\"init-status\" style=\"margin-bottom: 10px; color: blue;\">准备初始化...</div>\n  <button id=\"init-button\" style=\"padding: 5px 10px; margin-right: 10px;\">初始化拦截器</button>\n  <button id=\"test-button\" style=\"padding: 5px 10px; display: none;\">测试请求</button>\n</div>\n\n<script>\n(function() {\n  // 获取DOM元素\n  const statusEl = document.getElementById('init-status');\n  const initButton = document.getElementById('init-button');\n  const testButton = document.getElementById('test-button');\n  \n  // 您的认证token\n  const AUTH_TOKEN =\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGOHJzQXNKcTVqc2JNd0M2RzgydGpMaDRBMDBPR3Vtem43dUZJOV96SXI4In0.eyJleHAiOjE3NDUzNDcwNDgsImlhdCI6MTc0NTMxMTA0OCwianRpIjoiZjQ3YzIwMGYtNjkwYy00M2QyLWI1MjUtYjRhZmZhYjE2MDgyIiwiaXNzIjoiaHR0cHM6Ly9wYWFzLWF1dGguaG9sZGVyem9uZS5jbi9yZWFsbXMvcGFhcyIsInN1YiI6ImY6ZjAzNGUyMTktZjdiMi00ZTQzLTlmM2YtZTAyZDk0MDczZTc0OjE3OCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImhvbGRlci1wYyIsInNlc3Npb25fc3RhdGUiOiIxZmZjMjIzNC00ZTY1LTRmYmYtOTVhOC0yMDZkODBlNTI0MmEiLCJhY3IiOiJxcmNvZGUiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJzZXJ2aWNlX3ZlcnNpb24iOiJ2MSIsInNpZCI6IjFmZmMyMjM0LTRlNjUtNGZiZi05NWE4LTIwNmQ4MGU1MjQyYSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6Iua1iy3lkLTpopYiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiIxMzQzODE1NzQ4OSIsImdpdmVuX25hbWUiOiLmtYst5ZC06aKWIn0.hKODFXwlL8sMu-a-HuSqAEqGeG6GZhvfLOMaY-FwkDEMrMc5sN9zMPmHst_cNnPMTNJzSsi7GqsS-i5oDvVBOCq7mA3iR82ynIEvvOP7A92Cw7yh01Nr5J6awu87i_N1KWk0dWHdXkZw5eFFPZHSgJXnnIlavA6RiuPgFyKZHa2beSGJmupWDxOL4q_ePD00gp0rBa_JKxqEYKC97hM9IzOIMrO5tyeaJt01859thAAY-kvlmRpAXBYdcyll5G8c_9aKOxpF-AIxYe3pRzxmp4Yck-cE62Y4Dd8Q_ml_FkyAaPZzm9r63hTQRuCHt86nD7DSMuaPvfZaRd_GQxI4Sg\"; // 替换为您的实际token\n  \n  // 更新状态显示\n  function updateStatus(message, color) {\n    if (statusEl) {\n      statusEl.textContent = message;\n      statusEl.style.color = color || 'black';\n    }\n    console.log(message);\n  }\n  \n  // 主线程fetch拦截\n  function setupMainFetch() {\n    try {\n      // 保存原始fetch\n      const originalFetch = window.fetch;\n      \n      // 覆盖fetch\n      window.fetch = function(resource, options = {}) {\n        // 初始化headers\n        options = options || {};\n        options.headers = options.headers || {};\n        \n        // 添加Authorization头\n        options.headers = {\n          ...options.headers,\n          'Authorization': 'Bearer ' + AUTH_TOKEN\n        };\n        \n        // 调用原始fetch\n        return originalFetch.call(this, resource, options);\n      };\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n  \n  // XMLHttpRequest拦截\n  function setupXHR() {\n    try {\n      // 保存原始方法\n      const originalOpen = XMLHttpRequest.prototype.open;\n      const originalSend = XMLHttpRequest.prototype.send;\n      \n      // 覆盖open\n      XMLHttpRequest.prototype.open = function() {\n        this._url = arguments[1];\n        return originalOpen.apply(this, arguments);\n      };\n      \n      // 覆盖send\n      XMLHttpRequest.prototype.send = function() {\n        try {\n          this.setRequestHeader('Authorization', 'Bearer ' + AUTH_TOKEN);\n        } catch (e) {\n          console.warn('XHR已发送或请求头已锁定，无法添加Authorization:', e);\n        }\n        return originalSend.apply(this, arguments);\n      };\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n  \n  // 初始化EvalWorker拦截器\n  function setupEvalWorkerFetch() {\n    try {\n      // 存储token到store\n      storeValue(\"authToken\", AUTH_TOKEN, false);\n      \n      // 设置evalworker拦截器\n      return evalJs(`\n        try {\n          // 保存原始fetch\n          const originalFetch = self.fetch;\n          \n          // 覆盖fetch\n          self.fetch = function(resource, options = {}) {\n            // 初始化options\n            options = options || {};\n            options.headers = options.headers || {};\n            \n            // 获取token\n            const token = appsmith.store.authToken || \"${AUTH_TOKEN}\";\n            \n            // 添加Authorization头\n            options.headers = {\n              ...options.headers,\n              'Authorization': 'Bearer ' + token\n            };\n            \n            console.log('EvalWorker: 已为请求添加认证头');\n            \n            // 调用原始fetch\n            return originalFetch.call(this, resource, options);\n          };\n          \n          return { success: true, message: \"EvalWorker拦截器安装成功\" };\n        } catch (error) {\n          return { success: false, error: String(error) };\n        }\n      `);\n    } catch (error) {\n      return Promise.resolve({ success: false, error: error.message });\n    }\n  }\n  \n  // 初始化所有拦截器\n  async function initInterceptors() {\n    updateStatus('正在初始化拦截器...', 'blue');\n    \n    try {\n      // 初始化主线程fetch\n      const mainResult = setupMainFetch();\n      updateStatus('主线程Fetch拦截器: ' + (mainResult.success ? '成功' : '失败: ' + mainResult.error), \n                  mainResult.success ? 'green' : 'red');\n      \n      // 初始化XHR\n      const xhrResult = setupXHR();\n      updateStatus('XHR拦截器: ' + (xhrResult.success ? '成功' : '失败: ' + xhrResult.error), \n                  xhrResult.success ? 'green' : 'red');\n      \n      // 初始化evalworker\n      try {\n        updateStatus('正在设置EvalWorker拦截器...', 'blue');\n        const evalResult = await setupEvalWorkerFetch();\n        \n        let success = false;\n        let message = \"\";\n        \n        if (typeof evalResult === 'string') {\n          try {\n            const parsed = JSON.parse(evalResult);\n            success = parsed.success;\n            message = parsed.message || parsed.error || \"\";\n          } catch (e) {\n            success = true;\n            message = evalResult;\n          }\n        } else {\n          success = evalResult && evalResult.success;\n          message = evalResult ? (evalResult.message || evalResult.error || \"\") : \"未知结果\";\n        }\n        \n        updateStatus('EvalWorker拦截器: ' + (success ? '成功' : '失败: ' + message), \n                    success ? 'green' : 'red');\n      } catch (evalError) {\n        updateStatus('EvalWorker拦截器初始化出错: ' + evalError.message, 'red');\n      }\n      \n      // 全部完成\n      updateStatus('✅ 拦截器初始化完成!', 'green');\n      \n      // 显示测试按钮\n      if (testButton) {\n        testButton.style.display = 'inline-block';\n      }\n    } catch (error) {\n      updateStatus('❌ 初始化过程中出错: ' + error.message, 'red');\n    }\n  }\n  \n  // 测试请求\n  function testRequest() {\n    updateStatus('正在测试请求...', 'blue');\n    \n    fetch('https://goalgo-paas-juanw-re.holderzone.cn/')\n      .then(response => {\n        if (!response.ok) throw new Error('请求失败: ' + response.status);\n        return response.json();\n      })\n      .then(data => {\n        updateStatus('✅ 请求测试成功!', 'green');\n        console.log('测试结果:', data);\n      })\n      .catch(error => {\n        updateStatus('❌ 请求测试失败: ' + error.message, 'red');\n        console.error('测试错误:', error);\n      });\n  }\n  \n  // 设置按钮事件\n  if (initButton) {\n    initButton.onclick = initInterceptors;\n  }\n  \n  if (testButton) {\n    testButton.onclick = testRequest;\n  }\n  \n  // 自动执行初始化(可选)\n  // setTimeout(initInterceptors, 1000);\n})();\n</script>",
    "js": ""
  },
  "version": 1,
  "widgetId": "82gpr7s83t",
  "widgetName": "Custom2"
}